/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nea.autopilot.system;

import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.nio.file.*;

import java.util.Arrays;
import java.util.ArrayList;

import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author cp191057
 */
public class RouteGUI extends javax.swing.JFrame {

    
    //Values for the main GUI to use
    String[] executeRoute = null;
    int lineExecuteRoute;
    boolean routeExecuted = false;
    
    boolean customRoute = false;
    
    int WaypointNumber = 0;
    
    ArrayList<String[]> Routes = new ArrayList<String[]>();
    
    
    /**
     * Creates new form RouteGUI
     */
    public RouteGUI() {
        initComponents();
        SearchDatabaseTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WaypointSearchTextField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        WaypointSearchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        WaypointsTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        AddWaypointButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        RouteWaypointsTable = new javax.swing.JTable();
        ClearRouteButton = new javax.swing.JButton();
        RemoveSelectedWaypointRouteButton = new javax.swing.JButton();
        RouteComboBox = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        RouteOrderDNButton = new javax.swing.JButton();
        RouteOrderUPButton = new javax.swing.JButton();
        NewRoutesButton = new javax.swing.JButton();
        DeleteSavedRoutesButton = new javax.swing.JButton();
        EditRoutesButton = new javax.swing.JButton();
        RefreshSavedRoutesButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        SelectedRouteLabel = new javax.swing.JLabel();
        SelectSavedRoutesButton = new javax.swing.JButton();
        ExecuteRouteButton = new javax.swing.JButton();
        CustomRouteButton = new javax.swing.JButton();
        ExecuteRouteLight = new javax.swing.JPanel();

        setResizable(false);
        getContentPane().setLayout(null);

        WaypointSearchTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(WaypointSearchTextField);
        WaypointSearchTextField.setBounds(110, 10, 80, 20);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Waypoint Name:");
        jLabel25.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel25);
        jLabel25.setBounds(10, 10, 100, 20);

        WaypointSearchButton.setBackground(new java.awt.Color(148, 207, 236));
        WaypointSearchButton.setText("Search");
        WaypointSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WaypointSearchButtonActionPerformed(evt);
            }
        });
        getContentPane().add(WaypointSearchButton);
        WaypointSearchButton.setBounds(200, 10, 80, 20);

        WaypointsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Waypoint", "Type", "LAT", "LONG"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        WaypointsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        WaypointsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(WaypointsTable);
        if (WaypointsTable.getColumnModel().getColumnCount() > 0) {
            WaypointsTable.getColumnModel().getColumn(0).setResizable(false);
            WaypointsTable.getColumnModel().getColumn(1).setResizable(false);
            WaypointsTable.getColumnModel().getColumn(2).setResizable(false);
            WaypointsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 270, 200);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(290, 0, 20, 300);

        AddWaypointButton.setBackground(new java.awt.Color(204, 204, 204));
        AddWaypointButton.setText("Add");
        AddWaypointButton.setEnabled(false);
        AddWaypointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddWaypointButtonActionPerformed(evt);
            }
        });
        getContentPane().add(AddWaypointButton);
        AddWaypointButton.setBounds(10, 250, 60, 23);

        RouteWaypointsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order", "Waypoint"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        RouteWaypointsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(RouteWaypointsTable);
        if (RouteWaypointsTable.getColumnModel().getColumnCount() > 0) {
            RouteWaypointsTable.getColumnModel().getColumn(0).setResizable(false);
            RouteWaypointsTable.getColumnModel().getColumn(1).setResizable(false);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(300, 10, 170, 230);

        ClearRouteButton.setBackground(new java.awt.Color(204, 204, 204));
        ClearRouteButton.setText("Clear");
        ClearRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearRouteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ClearRouteButton);
        ClearRouteButton.setBounds(300, 250, 70, 23);

        RemoveSelectedWaypointRouteButton.setBackground(new java.awt.Color(204, 204, 204));
        RemoveSelectedWaypointRouteButton.setText("Remove");
        RemoveSelectedWaypointRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSelectedWaypointRouteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(RemoveSelectedWaypointRouteButton);
        RemoveSelectedWaypointRouteButton.setBounds(380, 250, 90, 23);

        getContentPane().add(RouteComboBox);
        RouteComboBox.setBounds(550, 10, 110, 20);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(540, 0, 20, 300);

        RouteOrderDNButton.setBackground(new java.awt.Color(204, 204, 204));
        RouteOrderDNButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        RouteOrderDNButton.setText("DN");
        RouteOrderDNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RouteOrderDNButtonActionPerformed(evt);
            }
        });
        getContentPane().add(RouteOrderDNButton);
        RouteOrderDNButton.setBounds(480, 50, 50, 21);

        RouteOrderUPButton.setBackground(new java.awt.Color(204, 204, 204));
        RouteOrderUPButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        RouteOrderUPButton.setText("UP");
        RouteOrderUPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RouteOrderUPButtonActionPerformed(evt);
            }
        });
        getContentPane().add(RouteOrderUPButton);
        RouteOrderUPButton.setBounds(480, 20, 50, 21);

        NewRoutesButton.setBackground(new java.awt.Color(204, 204, 204));
        NewRoutesButton.setText("New");
        NewRoutesButton.setEnabled(false);
        NewRoutesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewRoutesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(NewRoutesButton);
        NewRoutesButton.setBounds(550, 130, 110, 20);

        DeleteSavedRoutesButton.setBackground(new java.awt.Color(204, 204, 204));
        DeleteSavedRoutesButton.setText("Delete");
        DeleteSavedRoutesButton.setEnabled(false);
        DeleteSavedRoutesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteSavedRoutesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(DeleteSavedRoutesButton);
        DeleteSavedRoutesButton.setBounds(550, 220, 110, 20);

        EditRoutesButton.setBackground(new java.awt.Color(204, 204, 204));
        EditRoutesButton.setText("Edit");
        EditRoutesButton.setEnabled(false);
        EditRoutesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRoutesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(EditRoutesButton);
        EditRoutesButton.setBounds(550, 160, 110, 50);

        RefreshSavedRoutesButton.setBackground(new java.awt.Color(204, 204, 204));
        RefreshSavedRoutesButton.setText("Refresh");
        RefreshSavedRoutesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshSavedRoutesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(RefreshSavedRoutesButton);
        RefreshSavedRoutesButton.setBounds(550, 250, 110, 20);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("- Selected -");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel2);
        jLabel2.setBounds(0, 4, 110, 20);

        SelectedRouteLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SelectedRouteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SelectedRouteLabel.setText("NONE");
        SelectedRouteLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(SelectedRouteLabel);
        SelectedRouteLabel.setBounds(0, 30, 110, 14);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(550, 40, 110, 50);

        SelectSavedRoutesButton.setBackground(new java.awt.Color(204, 204, 204));
        SelectSavedRoutesButton.setText("Select");
        SelectSavedRoutesButton.setEnabled(false);
        SelectSavedRoutesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectSavedRoutesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SelectSavedRoutesButton);
        SelectSavedRoutesButton.setBounds(550, 100, 110, 20);

        ExecuteRouteButton.setBackground(new java.awt.Color(255, 204, 153));
        ExecuteRouteButton.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        ExecuteRouteButton.setText("EXE");
        ExecuteRouteButton.setEnabled(false);
        ExecuteRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteRouteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ExecuteRouteButton);
        ExecuteRouteButton.setBounds(480, 220, 50, 50);

        CustomRouteButton.setBackground(new java.awt.Color(204, 204, 204));
        CustomRouteButton.setText("Custom Route");
        CustomRouteButton.setEnabled(false);
        CustomRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomRouteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(CustomRouteButton);
        CustomRouteButton.setBounds(120, 250, 160, 20);

        ExecuteRouteLight.setBackground(new java.awt.Color(255, 102, 102));
        ExecuteRouteLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ExecuteRouteLight.setToolTipText("");

        javax.swing.GroupLayout ExecuteRouteLightLayout = new javax.swing.GroupLayout(ExecuteRouteLight);
        ExecuteRouteLight.setLayout(ExecuteRouteLightLayout);
        ExecuteRouteLightLayout.setHorizontalGroup(
            ExecuteRouteLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );
        ExecuteRouteLightLayout.setVerticalGroup(
            ExecuteRouteLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        getContentPane().add(ExecuteRouteLight);
        ExecuteRouteLight.setBounds(480, 190, 50, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WaypointSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WaypointSearchButtonActionPerformed
        SearchDatabaseTable();
    }//GEN-LAST:event_WaypointSearchButtonActionPerformed

    private void AddWaypointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddWaypointButtonActionPerformed
        int WaypointTableRowSelected = WaypointsTable.getSelectedRow();
        
        DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
        
        System.out.println(WaypointTableRowSelected);
        String SelectedWaypointName = (String) WaypointsTable.getModel().getValueAt(WaypointTableRowSelected, 0);
        
        WaypointNumber += 1; // Order number
        Object[] newRow = {WaypointNumber,SelectedWaypointName};
        RouteModel.addRow(newRow);
    }//GEN-LAST:event_AddWaypointButtonActionPerformed

    private void ClearRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearRouteButtonActionPerformed
        JFrame frame = new JFrame("Clear Route");
        
        int confirm = JOptionPane.showConfirmDialog(frame,"Are you sure you want to clear?","Clear Route",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
        
        if(confirm == JOptionPane.YES_OPTION){
            DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
            WaypointNumber = 0;
            RouteModel.setRowCount(0);
        }
    }//GEN-LAST:event_ClearRouteButtonActionPerformed

    private void RemoveSelectedWaypointRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSelectedWaypointRouteButtonActionPerformed
//        if(WaypointNumber > 0){
//            DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
//            RouteModel.removeRow(WaypointNumber - 1);
//
//            WaypointNumber -= 1;
//        }
        try{
            int RouteTableRowSelected = RouteWaypointsTable.getSelectedRow();

            DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();

            if(WaypointNumber > 0){ // Checking it is not empty

                RouteModel.removeRow(RouteTableRowSelected);  
                WaypointNumber -= 1;
                
                // Sort list back into order
                for(int i = 0; i < (WaypointNumber); i++){
                    RouteModel.setValueAt(i+1, i, 0);
                }
                
            }
        }
        catch(Exception e){
            System.out.println("No route table row selected");
        }
    }//GEN-LAST:event_RemoveSelectedWaypointRouteButtonActionPerformed

    private void RouteOrderUPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RouteOrderUPButtonActionPerformed
        ChangeOrderRouteTable("UP");
    }//GEN-LAST:event_RouteOrderUPButtonActionPerformed
    private void RouteOrderDNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RouteOrderDNButtonActionPerformed
        ChangeOrderRouteTable("DOWN");
    }//GEN-LAST:event_RouteOrderDNButtonActionPerformed
    public boolean checkRouteFileExists(){
       
        boolean fileExists = false;
        
        try{
            
            Path pathtoRouteFile = Paths.get("Routes.txt");
            
            File routeFile = new File("Routes.txt");
            
            //Check the route text file exists, if not create a new one for the user
            if(Files.notExists(pathtoRouteFile)){
                routeFile.createNewFile();
                
            }
            
            //If the file does exist / new one created - then run through process of displaying information
            if(Files.exists(pathtoRouteFile)){
                fileExists = true;
            }
        }
        catch(Exception e){
            System.out.println("Error in creation of file");
            fileExists = false;
        }
        return fileExists;
    }
    
    public void refreshRoutesList(){
        try{
            // Executes to check route file exists in process, if not creates such
            if(checkRouteFileExists()){
                boolean hasError = false;
                
                
                File routeFile = new File("Routes.txt");
                Scanner fileReader = new Scanner(routeFile);

                //Load database such that error checking can later take place
                JSONParser parser = new JSONParser();
                Object obj = parser.parse(new FileReader("waypoints.json"));            
                JSONArray databaseWaypoints = (JSONArray) obj;
            
            
  
                
                //Clear ArrayList of routes
                Routes.clear();
                RouteComboBox.removeAllItems();
                
                DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
                WaypointNumber = 0;
                RouteModel.setRowCount(0);

                
                //Read each line in the file of the routes
                while(fileReader.hasNextLine()){
                    String data = fileReader.nextLine();
                    
                    //Since route in form NAMEXX[<Waypoints>]
                    
                    //Tiny regular expression for square brackets filtering
                    String[] firstSplit = data.split("\\[|\\]");
                    
                    boolean containsWaypoints = false;
                    
                    String routeName = firstSplit[0];
                    System.out.println(routeName);
                    
                    String[] routeWaypoints = null;
                    
                    if(data.contains(",")){
                        routeWaypoints = firstSplit[1].split(",");
                        containsWaypoints = true;
                    }
                    //Waypoint validity
                    int correct = 0;
                    
                    if(containsWaypoints && routeWaypoints != null){
                        for(int i = 0; i < routeWaypoints.length; i++){


                            System.out.println(routeWaypoints[i]);

                            for(int j = 0; j < databaseWaypoints.size(); j++){
                                JSONObject CurrentTableWaypoint = (JSONObject) databaseWaypoints.get(j);
                                String WaypointName = CurrentTableWaypoint.get("name").toString();

                                // If the waypoint exists in the JSON database of waypoints
                                if(routeWaypoints[i].equals(WaypointName)){
                                    correct += 1;
                                }
                            }
                        }
                    }

                    //All waypoints on line are correct
                    if((!containsWaypoints && routeWaypoints == null) || correct == routeWaypoints.length){
                        RouteComboBox.addItem(routeName);

                        //Add to route array list
                        Routes.add(data.split("\\[|\\]|,"));
                    }
                    else{
                        hasError = true;
                    }

                    

                }
                
                if(hasError){
                    JFrame frame = new JFrame("Error loading");
                    JOptionPane.showConfirmDialog(frame,"Some routes have errors - all routes may not have been loaded...","Route Editor",JOptionPane.DEFAULT_OPTION,JOptionPane.ERROR_MESSAGE);
                }
                else{
                    JFrame frame = new JFrame("Success refresh");
                    JOptionPane.showConfirmDialog(frame,"All routes loaded successfully","Route Editor",JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
                }
                
                SelectSavedRoutesButton.setEnabled(true);
                
            }
        }
        catch(Exception e){
            System.out.println("Refresh exception...");
            
            System.out.println(e);
        }
    }
    
    private void RefreshSavedRoutesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshSavedRoutesButtonActionPerformed
        refreshRoutesList();
        NewRoutesButton.setEnabled(true);
        CustomRouteButton.setEnabled(true);
    }//GEN-LAST:event_RefreshSavedRoutesButtonActionPerformed
    public void selectRoute(){
        String selectedRouteNames = RouteComboBox.getItemAt(RouteComboBox.getSelectedIndex());
        
            SelectedRouteLabel.setText(selectedRouteNames);

            //Set other buttons to enabled
            EditRoutesButton.setEnabled(true);
            DeleteSavedRoutesButton.setEnabled(true);
            ExecuteRouteButton.setEnabled(true);
            
            //Get route model ready to populate
            DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
            WaypointNumber = 0;
            RouteModel.setRowCount(0);
            
            //Populate route list
            for(int i = 0; i < (Routes.size()); i++){
                String[] routeListNames = Routes.get(i);
                
                //If found, use index
                if(routeListNames[0].equals(selectedRouteNames)){
                    // j = 1 as we don't want to include route name
                    for(int j = 1; j < routeListNames.length; j++){
                        
                        //Create object for new row
                        Object[] newRow = {j,routeListNames[j]};
                        RouteModel.addRow(newRow);
                        
                        WaypointNumber += 1;
                        
                    }
                    
                    lineExecuteRoute = i;
                    
                }
            }
    }
    
    
    private void SelectSavedRoutesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectSavedRoutesButtonActionPerformed
        JFrame frame = new JFrame("Confirmation");
        
        int confirm = JOptionPane.showConfirmDialog(frame,"Are you sure you want to select a new route?\nUnsaved routes will be lost","Route Editor",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
        
        if(confirm == JOptionPane.YES_OPTION){
            selectRoute();
        }
        else if(confirm == JOptionPane.NO_OPTION){
            System.out.println("Route not selected...");
        }
        else{ System.out.println("No option chosen..."); }
        
        
        
    }//GEN-LAST:event_SelectSavedRoutesButtonActionPerformed
    public boolean noDuplicateRouteNames(String searchName){
        boolean isTrue = true;
        
        for(int i = 0; i < Routes.size(); i++){
            String[] routeListNames = Routes.get(i);
            
            if(routeListNames[0].equals(searchName)){
                isTrue = false;
            }
        }
        
        return isTrue;
    }
    private void NewRoutesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewRoutesButtonActionPerformed
        try{
            
            //To store lines already in file
            ArrayList<String> routeFileRawArray = new ArrayList<String>();
            routeFileRawArray.clear();
            
            //Check file exists before continuing
            checkRouteFileExists();
            
            File previousRouteFile = new File("Routes.txt");
            Scanner fileReader = new Scanner(previousRouteFile);
            
            JFrame frame = new JFrame("Confirmation");
        
            String nameOfNewRoute = JOptionPane.showInputDialog(frame,"Name of new route:","Route Editor",JOptionPane.QUESTION_MESSAGE);
            
            //Make sure user inputs a name for the new route is correct and there are no duplicates
            if(!( nameOfNewRoute.isEmpty() || nameOfNewRoute.contains(" ") ) && noDuplicateRouteNames(nameOfNewRoute)){
                
                //Collect all route data from file
                while(fileReader.hasNextLine()){
                    String nextLine = fileReader.nextLine();
                    routeFileRawArray.add(nextLine);
                }
                
                String newLineInsert = nameOfNewRoute + "[]";
                
                FileWriter routeFile = new FileWriter("Routes.txt");
                
                for(int i = 0; i < routeFileRawArray.size(); i++){
                    //Write back file
                    routeFile.write(routeFileRawArray.get(i)+"\n");
                }
                
                //Write new line
                routeFile.write(newLineInsert);
                
                routeFile.close();
                
                //Refresh routes list to populate new
                refreshRoutesList();
                
            }
            else{
                JOptionPane.showConfirmDialog(frame,"Invalid name for route!","Route Editor",JOptionPane.DEFAULT_OPTION,JOptionPane.ERROR_MESSAGE);
                
            }
            
            
            //EditRoutesButton
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_NewRoutesButtonActionPerformed

    private void EditRoutesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditRoutesButtonActionPerformed
        String currentState = EditRoutesButton.getText();
        
        if(currentState.equals("Edit")){
            
            //Set buttons
            SelectSavedRoutesButton.setEnabled(false);
            NewRoutesButton.setEnabled(false);
            DeleteSavedRoutesButton.setEnabled(false);
            RefreshSavedRoutesButton.setEnabled(false);
                    
            //Prevent clash
            CustomRouteButton.setEnabled(false);
            ExecuteRouteButton.setEnabled(false);
            //Allow waypoints to be added
            AddWaypointButton.setEnabled(true);
            
            EditRoutesButton.setText("Save");
            EditRoutesButton.setBackground(new Color(0,204,51));
            
        }
        if(currentState.equals("Save")){
            
            JFrame frame = new JFrame("Confirmation");
        
            int confirm = JOptionPane.showConfirmDialog(frame,"Are you sure you want to save changes?","Route Editor",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);

            if(confirm == JOptionPane.YES_OPTION){
                editFile("EDIT");
                
                SelectSavedRoutesButton.setEnabled(true);
                NewRoutesButton.setEnabled(true);
                DeleteSavedRoutesButton.setEnabled(true);
                RefreshSavedRoutesButton.setEnabled(true);

                //Prevent clash
                CustomRouteButton.setEnabled(true);
                ExecuteRouteButton.setEnabled(true);
                //Allow waypoints to be added
                AddWaypointButton.setEnabled(false);

                EditRoutesButton.setText("Edit");
                EditRoutesButton.setBackground(new Color(204,204,204));
                
            }
            else if(confirm == JOptionPane.NO_OPTION){
                
                selectRoute();
                
                SelectSavedRoutesButton.setEnabled(true);
                NewRoutesButton.setEnabled(true);
                DeleteSavedRoutesButton.setEnabled(true);
                RefreshSavedRoutesButton.setEnabled(true);

                //Prevent clash
                CustomRouteButton.setEnabled(true);
                //Allow waypoints to be added
                AddWaypointButton.setEnabled(false);

                EditRoutesButton.setText("Edit");
                EditRoutesButton.setBackground(new Color(204,204,204));
            }
            else{
                //Do nothing again!
            }
        }
        
    }//GEN-LAST:event_EditRoutesButtonActionPerformed
    public void editFile(String typeOfEdit){
        try{
            ArrayList<String> routeFileRawArray = new ArrayList<String>();
            routeFileRawArray.clear();
            
            //Check file exists before continuing
            checkRouteFileExists();
            
            //Line to make changes
            int line = 0;
            boolean found = false;
            
            String routeSeleted = SelectedRouteLabel.getText();
            
            File previousRouteFile = new File("Routes.txt");
            Scanner fileReader = new Scanner(previousRouteFile);
            
            
            while(fileReader.hasNextLine()){
                String nextLine = fileReader.nextLine();
                routeFileRawArray.add(nextLine);
            }
            
            //Find line in question to edit
            for(int i = 0; i < routeFileRawArray.size(); i++){
                String[] firstSplit = routeFileRawArray.get(i).split("\\[|\\]");
                
                if(firstSplit[0].equals(routeSeleted)){
                    line = i;
                    found = true;
                }
            }
            
            //To make sure file is actually found before making any attempt to change
            if(found){
            
                //Perform either EDIT or DELETE
                switch(typeOfEdit){

                    //Save edits to line
                    case "EDIT":
                        
                        //Get contents of table
                        DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
                        
                        int amountOfWaypoints = RouteModel.getRowCount();
                        String[] waypointsToAppend = new String[amountOfWaypoints];
                        
                        String selectedRouteName = SelectedRouteLabel.getText();
                        
                        for(int i = 0; i < amountOfWaypoints; i++){
                            //Get the current waypoint name
                            String SelectedWaypointName = (String) RouteModel.getValueAt(i, 1);
                            
                            waypointsToAppend[i] = SelectedWaypointName;
                        }
                        
                        String joinedWaypoints = String.join(",", waypointsToAppend);
                        
                        String editedCorrectLine = selectedRouteName + "[" + joinedWaypoints + "]";
                        System.out.println(editedCorrectLine);
                        
                        //Place back into array
                        routeFileRawArray.set(line, editedCorrectLine);
                        
                        break;

                    //Delete line
                    case "DELETE":
                        
                        //Remove line in temp array
                        routeFileRawArray.remove(line);
                        
                        //Setup workspace
                        SelectedRouteLabel.setText(("NONE"));
                        EditRoutesButton.setEnabled(false);
                        DeleteSavedRoutesButton.setEnabled(false);
                        
                        break;

                }

                //Prepare file editing!
                FileWriter routeFile = new FileWriter("Routes.txt");

                for(int i = 0; i < routeFileRawArray.size(); i++){
                    //Write back file with changes
                    routeFile.write(routeFileRawArray.get(i)+"\n");
                }

                //Close editing!
                routeFile.close();
                
                //Refresh list
                refreshRoutesList();
            }
            
        }
        catch(Exception e){
            System.out.println("Edit file exception...");
            System.out.println(e);
        }
    }
    
    private void DeleteSavedRoutesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteSavedRoutesButtonActionPerformed
        
        String selectedRouteName = SelectedRouteLabel.getText();
        
        JFrame frame = new JFrame("Confirmation");

        int confirm = JOptionPane.showConfirmDialog(frame,"Are you sure you want to delete selected route?\n\nName: " + selectedRouteName,"Route Editor",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);

        if(confirm == JOptionPane.YES_OPTION){
            editFile("DELETE"); // Call edit class
        }
        else if(confirm == JOptionPane.NO_OPTION){
            //Do nothing either!
        }
        else{
            //Do nothing! User choose not to delete
        }
    }//GEN-LAST:event_DeleteSavedRoutesButtonActionPerformed

    private void ExecuteRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteRouteButtonActionPerformed
        
        String[] proposedRoute;

        //Check for custom route enabled
        if(customRoute == true){
            //Creates a custom entry
            proposedRoute = collectCustomRoute();
        }
        else{
            proposedRoute = Routes.get(lineExecuteRoute);
        }
        
        
        
        if(routeExecuted == false && proposedRoute.length > 1){
            
            executeRoute = proposedRoute;
            
            //Disable aklmost every button
            AddWaypointButton.setEnabled(false);
            CustomRouteButton.setEnabled(false);
            ClearRouteButton.setEnabled(false);
            RemoveSelectedWaypointRouteButton.setEnabled(false);
            RouteOrderUPButton.setEnabled(false);
            RouteOrderDNButton.setEnabled(false);
            SelectSavedRoutesButton.setEnabled(false);
            NewRoutesButton.setEnabled(false);
            EditRoutesButton.setEnabled(false);
            DeleteSavedRoutesButton.setEnabled(false);
            RefreshSavedRoutesButton.setEnabled(false);
            
            //Set global variable that the route has been selected to be executed
            routeExecuted = true;
            
            ExecuteRouteLight.setBackground(new Color(131,213,131));
            
        }
        else if(routeExecuted == true){
            
            if(customRoute == true){
                AddWaypointButton.setEnabled(true);
                
                
                
            }
            else{
                SelectSavedRoutesButton.setEnabled(true);
                NewRoutesButton.setEnabled(true);
                EditRoutesButton.setEnabled(true);
                DeleteSavedRoutesButton.setEnabled(true);
                RefreshSavedRoutesButton.setEnabled(true);
                
            }
            RouteOrderUPButton.setEnabled(true);
            RouteOrderDNButton.setEnabled(true);
            ClearRouteButton.setEnabled(true);
            RemoveSelectedWaypointRouteButton.setEnabled(true);
            CustomRouteButton.setEnabled(true);
            
            routeExecuted = false;
            ExecuteRouteLight.setBackground(new Color(255,102,102));
        }
    }//GEN-LAST:event_ExecuteRouteButtonActionPerformed
    public String[] collectCustomRoute(){
        
        DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
        
        //CUSTOM as route name
        String tempRouteFormat = "CUSTOM";
        
        for(int i = 0; i < RouteModel.getRowCount(); i++){
            
            tempRouteFormat = tempRouteFormat.concat("," + RouteModel.getValueAt(i, 1));
        }
        
        System.out.println(tempRouteFormat);
        
        return tempRouteFormat.split(",");
    }
    
    private void CustomRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomRouteButtonActionPerformed
        JFrame frame = new JFrame("Confirmation");

        if(CustomRouteButton.getText().equals("Custom Route")){
            int confirm = JOptionPane.showConfirmDialog(frame,"Are you sure you want to make a custom route?","Route Editor",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);

            if(confirm == JOptionPane.YES_OPTION){

                //Clear route table
                DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
                WaypointNumber = 0;
                RouteModel.setRowCount(0);

                //Disable buttons
                SelectSavedRoutesButton.setEnabled(false);
                NewRoutesButton.setEnabled(false);
                EditRoutesButton.setEnabled(false);
                DeleteSavedRoutesButton.setEnabled(false);
                RefreshSavedRoutesButton.setEnabled(false);

                //Enable add button
                AddWaypointButton.setEnabled(true);

                CustomRouteButton.setText("Exit Custom Route");
                
                ExecuteRouteButton.setEnabled(true);
                
                //Set variable to true so other functions can use logic
                customRoute = true;
            }
            else if(confirm == JOptionPane.NO_OPTION){
                //Do nothing either!
            }
            else{
                //Do nothing! User chose not to delete
            }
        }
        else if(CustomRouteButton.getText().equals("Exit Custom Route")){
            
            //Clear route table
            DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
            WaypointNumber = 0;
            RouteModel.setRowCount(0);

            //Disable buttons
            SelectSavedRoutesButton.setEnabled(true);
            NewRoutesButton.setEnabled(true);
            EditRoutesButton.setEnabled(true);
            DeleteSavedRoutesButton.setEnabled(true);
            RefreshSavedRoutesButton.setEnabled(true);

            //Enable add button
            AddWaypointButton.setEnabled(false);

            CustomRouteButton.setText("Custom Route");
            
            ExecuteRouteButton.setEnabled(false);
            
            //Let other fuctions know cutom route enabled
            customRoute = false;
        }
    }//GEN-LAST:event_CustomRouteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RouteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RouteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RouteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RouteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RouteGUI().setVisible(true);
            }
        });
    }
    
    public void ChangeOrderRouteTable(String direction){
        
        try{
            DefaultTableModel RouteModel = (DefaultTableModel) RouteWaypointsTable.getModel();
            int RouteTableRowSelected = RouteWaypointsTable.getSelectedRow();



            System.out.println(RouteTableRowSelected);

            //Object[] newRow = {WaypointNumber,RouteTableRowSelected};
            //RouteModel.insertRow(1,newRow);

            if(RouteWaypointsTable.getRowCount() > 1){ // Since no need to change order with 1 item

                // Assigning needed stored 3 waypoints (above, below and selected waypoints)

                String SelectedWaypointName = (String) RouteModel.getValueAt(RouteTableRowSelected, 1);
                int Selectedorder = (int) RouteModel.getValueAt(RouteTableRowSelected, 0);


                // Moving an item up
                if(direction.equals("UP") && (RouteTableRowSelected > 0)){

                    // Collects information about waypoint above
                    String WaypointNameAbove = (String) RouteModel.getValueAt(RouteTableRowSelected-1, 1);
                    int orderAbove = (int) RouteModel.getValueAt(RouteTableRowSelected-1, 0);

                    RouteModel.setValueAt(Selectedorder - 1,RouteTableRowSelected , 0);

                    RouteModel.removeRow(RouteTableRowSelected-1);

                    RouteModel.insertRow(RouteTableRowSelected, new Object[]{orderAbove+1,WaypointNameAbove});

                }

                // Moving an item down
                if(direction.equals("DOWN") && (RouteTableRowSelected < RouteWaypointsTable.getRowCount()-1)){

                    // Collects information about waypoint below
                    String WaypointNameBelow = (String) RouteModel.getValueAt(RouteTableRowSelected+1, 1);
                    int orderBelow = (int) RouteModel.getValueAt(RouteTableRowSelected+1, 0);

                    RouteModel.setValueAt(Selectedorder + 1,RouteTableRowSelected , 0);

                    RouteModel.removeRow(RouteTableRowSelected + 1);

                    RouteModel.insertRow(RouteTableRowSelected, new Object[]{orderBelow-1,WaypointNameBelow});

                }




            }
            
        }
        catch(Exception e){
            System.out.println("No row selected!");
        }
        
    }
    
    public void SearchDatabaseTable(){
            //JSON Parser object
        JSONParser parser = new JSONParser();
        
        try{
            Object obj = parser.parse(new FileReader("waypoints.json"));            
            JSONArray Waypoints = (JSONArray) obj;
            String WaypointSearchEntry = WaypointSearchTextField.getText().toUpperCase();

            DefaultTableModel WaypointsModel = (DefaultTableModel) WaypointsTable.getModel();
            WaypointsModel.setRowCount(0);
            
            
            for(int i = 0; i < Waypoints.size(); i++) {
                
                JSONObject CurrentTableWaypoint = (JSONObject) Waypoints.get(i);
                
                //Set the currently selected waypoint to a String
                String WaypointName = CurrentTableWaypoint.get("name").toString();
                
                if(WaypointName.startsWith(WaypointSearchEntry)){
                    
                    //Get Waypoint Type
                    String WaypointType = CurrentTableWaypoint.get("type").toString();
                    
                    //In funny format in JSOn file - thus conversion to some workable numbers! LONG / LAT <- Be careful!
                    String StringWaypointCoords = CurrentTableWaypoint.get("coords").toString();
                    double[] WaypointCoords = Arrays.stream((StringWaypointCoords.substring(1,StringWaypointCoords.length()-1)).split(",")).mapToDouble(Double::parseDouble).toArray();;
                    //Make it tidy so I can refer which one is which otherwise I will make mistakes!
                    double WaypointLAT = WaypointCoords[1];
                    double WaypointLONG = WaypointCoords[0];

                    //In object form I can have different types for what I set the table to expect
                    Object[] newRow = {WaypointName,WaypointType,WaypointLAT,WaypointLONG};
                    WaypointsModel.addRow(newRow);                
                }
                
            }
            
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void RouteFileExists(){
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddWaypointButton;
    private javax.swing.JButton ClearRouteButton;
    private javax.swing.JButton CustomRouteButton;
    private javax.swing.JButton DeleteSavedRoutesButton;
    private javax.swing.JButton EditRoutesButton;
    private javax.swing.JButton ExecuteRouteButton;
    private javax.swing.JPanel ExecuteRouteLight;
    private javax.swing.JButton NewRoutesButton;
    private javax.swing.JButton RefreshSavedRoutesButton;
    private javax.swing.JButton RemoveSelectedWaypointRouteButton;
    private javax.swing.JComboBox<String> RouteComboBox;
    private javax.swing.JButton RouteOrderDNButton;
    private javax.swing.JButton RouteOrderUPButton;
    private javax.swing.JTable RouteWaypointsTable;
    private javax.swing.JButton SelectSavedRoutesButton;
    private javax.swing.JLabel SelectedRouteLabel;
    private javax.swing.JButton WaypointSearchButton;
    private javax.swing.JTextField WaypointSearchTextField;
    private javax.swing.JTable WaypointsTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
