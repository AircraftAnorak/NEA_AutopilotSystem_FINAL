package nea.autopilot.system;

import java.awt.*;
import java.awt.Canvas;
import java.awt.Graphics;

import javax.swing.JOptionPane;
import javax.swing.JFrame;

import javax.swing.ButtonGroup;

import java.io.FileReader;

import javax.swing.text.DefaultCaret;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.fazecast.jSerialComm.*;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;

import java.text.DecimalFormat;
import java.math.RoundingMode;

// This code is indended only for the recipient - Caspar

public class MainAutopilotGUI extends javax.swing.JFrame {
    
    AutopilotVariables autopilotVars = new AutopilotVariables();
    
    RouteGUI RouteEditor = new RouteGUI();
    
    public boolean RouteEnabled = false;

    public boolean radioConnected = false;
    
    public char textboxPressureType = 'P'; // P - Pascals / I - InMg
    
    public int ArtHDG = 360;
    public int ArtSPD = 0;
    public int y1 = 100;
    public int y2 = 100;
    
    public Color RedLight = new Color(255,102,102);
    public Color MagentaLight = new Color(226,83,226);
    public Color GreenLight = new Color(131,213,131);
    public Color GreyLight = new Color(204,204,204);
    public Color OrangeLight = new Color(234,169,104);
    public Color AmberLight = new Color(255,204,153);
    
    public double initialDistanceFromWaypoint = -1;
    int waypointPriority = 1;
    
    int[] xPoints = {0,0,200,200};
    int[] yPoints = {200,y1,y2,200};
    
    public SerialPort ActiveSerialPort;
    public boolean isSerialPortOpen = false;
       
    public MainAutopilotGUI() {
        initComponents();
        Graphics g = ArtificialHorizon.getGraphics();
        SearchDatabaseTable(); // Refresh table upon launch
        
        ButtonGroup pressureRadioButtons = new ButtonGroup();
        pressureRadioButtons.add(HectopascalRadioButton);
        pressureRadioButtons.add(InchesMercRadioButton);
        
        DefaultCaret caret = (DefaultCaret) SerialOutputTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        SerialOutputTextArea.setCaretPosition(SerialOutputTextArea.getDocument().getLength());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        ControlPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        AltitudeInputTextbox = new javax.swing.JTextField();
        SetAltitudeAutopilotButton = new javax.swing.JButton();
        AltitudeSetLight = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        HeadingInputTextbox = new javax.swing.JTextField();
        SpeedHoldButton = new javax.swing.JButton();
        HeadingSetLight = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        SpeedInputTextbox = new javax.swing.JTextField();
        DirectSetLight = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        DirectToWaypointButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        DirectWaypointNameTextField = new javax.swing.JTextField();
        SetSpeedAutopilotButton = new javax.swing.JButton();
        SpeedSetLight = new javax.swing.JPanel();
        jSeparator8 = new javax.swing.JSeparator();
        SetHeadingAutopilotButton = new javax.swing.JButton();
        AltitudeHoldButton = new javax.swing.JButton();
        HeadingHoldButton = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        MASTER = new javax.swing.JButton();
        AutopilotMasterLight = new javax.swing.JPanel();
        jSeparator12 = new javax.swing.JSeparator();
        jSeparator13 = new javax.swing.JSeparator();
        jLabel49 = new javax.swing.JLabel();
        SelectedRouteTextBox = new javax.swing.JTextField();
        OpenRouteGUIButton = new javax.swing.JButton();
        RouteEnabledButtonLight = new javax.swing.JPanel();
        EnableRouteButton = new javax.swing.JButton();
        WaypointPanel = new javax.swing.JPanel();
        WaypointSearchButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        WaypointSearchTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        WaypointsTable = new javax.swing.JTable();
        SelectSelectedWaypointButton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        SelectedWaypointNameTextField = new javax.swing.JTextField();
        WaypointSelectedLight = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        ShowSelectedTypeLabel = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JSeparator();
        typelabel1jlabel = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        ShowSelectedLongLabel = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel28 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        ShowSelectedLatLabel = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JSeparator();
        jLabel32 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        FlightPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        SerialConnectedLight = new javax.swing.JPanel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel23 = new javax.swing.JLabel();
        ComboBoxCOM = new javax.swing.JComboBox<>();
        ComRefreshButton = new javax.swing.JButton();
        ButtonOpenComPort = new javax.swing.JButton();
        ButtonCloseComPort = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        ComboBoxHardwareInterfaceType = new javax.swing.JComboBox<>();
        TestSerialButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SerialOutputTextArea = new javax.swing.JTextArea();
        AutoscrollCheckBox = new javax.swing.JCheckBox();
        jSeparator14 = new javax.swing.JSeparator();
        jButton5 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        ArtificialHorizon = new DrawCanvas();
        PowerAnnunciatorLight = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        SerialAnnunciatorLight = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        AltimeterAnnunciatorLight = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        CompassAnnunciatorLight = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        PitotAnnunciatorLight = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        GyroAnnunciatorLight = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        GPSAnnunciatorLight = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        RadioAnnunciatorLight = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        HeightReadoutLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        HeadingReadoutLabel = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        SetQNHTextField = new javax.swing.JTextField();
        HectopascalRadioButton = new javax.swing.JRadioButton();
        InchesMercRadioButton = new javax.swing.JRadioButton();
        StandardPressureButton = new javax.swing.JButton();
        QNHUpdateButton = new javax.swing.JButton();
        jPanel30 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        AutopilotVariableRouteReadout = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        AutopilotVariableAltitudeReadout = new javax.swing.JLabel();
        AutopilotVariableSpeedReadout = new javax.swing.JLabel();
        AutopilotVariableHeadingReadout = new javax.swing.JLabel();
        jSeparator15 = new javax.swing.JSeparator();
        jSeparator16 = new javax.swing.JSeparator();
        jSeparator17 = new javax.swing.JSeparator();
        jSeparator18 = new javax.swing.JSeparator();
        jLabel61 = new javax.swing.JLabel();
        AutopilotVariableWaypointReadout = new javax.swing.JLabel();
        AutopilotEngaugedAnnunciatorLight = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        SpeedReadoutLabel = new javax.swing.JLabel();
        jPanel35 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jPanel33 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        NextWaypointReadoutLabel = new javax.swing.JLabel();
        AutopilotVariableAltitudeReadout1 = new javax.swing.JLabel();
        RouteCurrentLatitudeReadoutLabel = new javax.swing.JLabel();
        RouteCurrentLongitudeReadoutLabel = new javax.swing.JLabel();
        AutopilotVariableAltitudeReadout4 = new javax.swing.JLabel();
        jSeparator21 = new javax.swing.JSeparator();
        jLabel63 = new javax.swing.JLabel();
        ProgressToWaypointBar = new javax.swing.JProgressBar();
        AutopilotVariableAltitudeReadout5 = new javax.swing.JLabel();
        LatitudeOfWaypointLabel = new javax.swing.JLabel();
        AutopilotVariableAltitudeReadout7 = new javax.swing.JLabel();
        LongitudeOfWaypointLabel = new javax.swing.JLabel();
        AutopilotVariableAltitudeReadout9 = new javax.swing.JLabel();
        DistanceToWaypointLabel = new javax.swing.JLabel();
        AutopilotVariableAltitudeReadout11 = new javax.swing.JLabel();
        BearingToWaypointLabel = new javax.swing.JLabel();
        AutopilotVariableAltitudeReadout13 = new javax.swing.JLabel();
        TimeToWaypointLabel = new javax.swing.JLabel();
        ExecutedRouteReadoutLabel = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        RouteStatusLight = new javax.swing.JPanel();
        RouteOrDirectWaypointLabel = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        DirectSetLight1 = new javax.swing.JPanel();
        MenuBarMain = new javax.swing.JMenuBar();
        jMenuAutopilot = new javax.swing.JMenu();
        jMenuItemAutopilotDisconnect = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemDisconnect1 = new javax.swing.JMenuItem();
        jMenuRoute = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemCreateRoute = new javax.swing.JMenuItem();
        jMenuItemCreateRoute2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ControlPanel.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RTE:");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ControlPanel.add(jLabel1);
        jLabel1.setBounds(0, 300, 50, 20);
        ControlPanel.add(jSeparator3);
        jSeparator3.setBounds(0, 150, 300, 10);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("HOLD:");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ControlPanel.add(jLabel2);
        jLabel2.setBounds(0, 70, 290, 20);
        ControlPanel.add(AltitudeInputTextbox);
        AltitudeInputTextbox.setBounds(50, 160, 70, 20);

        SetAltitudeAutopilotButton.setBackground(new java.awt.Color(204, 204, 204));
        SetAltitudeAutopilotButton.setText("SET");
        SetAltitudeAutopilotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetAltitudeAutopilotButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(SetAltitudeAutopilotButton);
        SetAltitudeAutopilotButton.setBounds(150, 160, 60, 20);

        AltitudeSetLight.setBackground(new java.awt.Color(255, 102, 102));
        AltitudeSetLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AltitudeSetLight.setToolTipText("");

        javax.swing.GroupLayout AltitudeSetLightLayout = new javax.swing.GroupLayout(AltitudeSetLight);
        AltitudeSetLight.setLayout(AltitudeSetLightLayout);
        AltitudeSetLightLayout.setHorizontalGroup(
            AltitudeSetLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        AltitudeSetLightLayout.setVerticalGroup(
            AltitudeSetLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        ControlPanel.add(AltitudeSetLight);
        AltitudeSetLight.setBounds(240, 160, 40, 20);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("HDG:");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ControlPanel.add(jLabel4);
        jLabel4.setBounds(0, 190, 50, 20);

        HeadingInputTextbox.setBackground(new java.awt.Color(242, 235, 224));
        ControlPanel.add(HeadingInputTextbox);
        HeadingInputTextbox.setBounds(50, 190, 70, 20);

        SpeedHoldButton.setBackground(new java.awt.Color(204, 204, 204));
        SpeedHoldButton.setText("Speed");
        SpeedHoldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpeedHoldButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(SpeedHoldButton);
        SpeedHoldButton.setBounds(190, 90, 90, 20);

        HeadingSetLight.setBackground(new java.awt.Color(255, 102, 102));
        HeadingSetLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        HeadingSetLight.setToolTipText("");

        javax.swing.GroupLayout HeadingSetLightLayout = new javax.swing.GroupLayout(HeadingSetLight);
        HeadingSetLight.setLayout(HeadingSetLightLayout);
        HeadingSetLightLayout.setHorizontalGroup(
            HeadingSetLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        HeadingSetLightLayout.setVerticalGroup(
            HeadingSetLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        ControlPanel.add(HeadingSetLight);
        HeadingSetLight.setBounds(240, 190, 40, 20);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("SPD:");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ControlPanel.add(jLabel5);
        jLabel5.setBounds(0, 220, 50, 20);
        ControlPanel.add(SpeedInputTextbox);
        SpeedInputTextbox.setBounds(50, 220, 70, 20);

        DirectSetLight.setBackground(new java.awt.Color(255, 102, 102));
        DirectSetLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout DirectSetLightLayout = new javax.swing.GroupLayout(DirectSetLight);
        DirectSetLight.setLayout(DirectSetLightLayout);
        DirectSetLightLayout.setHorizontalGroup(
            DirectSetLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        DirectSetLightLayout.setVerticalGroup(
            DirectSetLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        ControlPanel.add(DirectSetLight);
        DirectSetLight.setBounds(240, 260, 40, 20);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("STATUS:");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ControlPanel.add(jLabel6);
        jLabel6.setBounds(220, 130, 80, 14);

        DirectToWaypointButton.setBackground(new java.awt.Color(204, 204, 204));
        DirectToWaypointButton.setText("SET");
        DirectToWaypointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectToWaypointButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(DirectToWaypointButton);
        DirectToWaypointButton.setBounds(150, 260, 60, 20);
        ControlPanel.add(jSeparator5);
        jSeparator5.setBounds(0, 290, 300, 10);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        ControlPanel.add(jSeparator4);
        jSeparator4.setBounds(220, 120, 10, 230);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("AUTOMATIC:");
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ControlPanel.add(jLabel15);
        jLabel15.setBounds(0, 130, 210, 14);

        jLabel26.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("ALT:");
        jLabel26.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ControlPanel.add(jLabel26);
        jLabel26.setBounds(0, 160, 50, 20);

        DirectWaypointNameTextField.setEditable(false);
        DirectWaypointNameTextField.setBackground(new java.awt.Color(240, 225, 201));
        DirectWaypointNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ControlPanel.add(DirectWaypointNameTextField);
        DirectWaypointNameTextField.setBounds(50, 260, 90, 20);

        SetSpeedAutopilotButton.setBackground(new java.awt.Color(204, 204, 204));
        SetSpeedAutopilotButton.setText("SET");
        SetSpeedAutopilotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetSpeedAutopilotButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(SetSpeedAutopilotButton);
        SetSpeedAutopilotButton.setBounds(150, 220, 60, 20);

        SpeedSetLight.setBackground(new java.awt.Color(255, 102, 102));
        SpeedSetLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout SpeedSetLightLayout = new javax.swing.GroupLayout(SpeedSetLight);
        SpeedSetLight.setLayout(SpeedSetLightLayout);
        SpeedSetLightLayout.setHorizontalGroup(
            SpeedSetLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        SpeedSetLightLayout.setVerticalGroup(
            SpeedSetLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        ControlPanel.add(SpeedSetLight);
        SpeedSetLight.setBounds(240, 220, 40, 20);
        ControlPanel.add(jSeparator8);
        jSeparator8.setBounds(0, 250, 300, 10);

        SetHeadingAutopilotButton.setBackground(new java.awt.Color(204, 204, 204));
        SetHeadingAutopilotButton.setText("SET");
        SetHeadingAutopilotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetHeadingAutopilotButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(SetHeadingAutopilotButton);
        SetHeadingAutopilotButton.setBounds(150, 190, 60, 20);

        AltitudeHoldButton.setBackground(new java.awt.Color(204, 204, 204));
        AltitudeHoldButton.setText("Altitude");
        AltitudeHoldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AltitudeHoldButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(AltitudeHoldButton);
        AltitudeHoldButton.setBounds(10, 90, 90, 20);

        HeadingHoldButton.setBackground(new java.awt.Color(204, 204, 204));
        HeadingHoldButton.setText("Heading");
        HeadingHoldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeadingHoldButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(HeadingHoldButton);
        HeadingHoldButton.setBounds(100, 90, 90, 20);

        jLabel43.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel43.setText("knts");
        ControlPanel.add(jLabel43);
        jLabel43.setBounds(120, 220, 30, 20);

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel44.setText("ft");
        ControlPanel.add(jLabel44);
        jLabel44.setBounds(120, 160, 20, 20);

        jLabel45.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel45.setText("°");
        ControlPanel.add(jLabel45);
        jLabel45.setBounds(120, 190, 20, 20);

        MASTER.setBackground(new java.awt.Color(255, 255, 153));
        MASTER.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        MASTER.setText("MASTER");
        MASTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MASTERActionPerformed(evt);
            }
        });
        ControlPanel.add(MASTER);
        MASTER.setBounds(10, 10, 80, 40);

        AutopilotMasterLight.setBackground(new java.awt.Color(255, 102, 102));
        AutopilotMasterLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout AutopilotMasterLightLayout = new javax.swing.GroupLayout(AutopilotMasterLight);
        AutopilotMasterLight.setLayout(AutopilotMasterLightLayout);
        AutopilotMasterLightLayout.setHorizontalGroup(
            AutopilotMasterLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        AutopilotMasterLightLayout.setVerticalGroup(
            AutopilotMasterLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        ControlPanel.add(AutopilotMasterLight);
        AutopilotMasterLight.setBounds(100, 10, 40, 40);
        ControlPanel.add(jSeparator12);
        jSeparator12.setBounds(0, 60, 310, 20);
        ControlPanel.add(jSeparator13);
        jSeparator13.setBounds(0, 120, 300, 10);

        jLabel49.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel49.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel49.setText("DCT:");
        jLabel49.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ControlPanel.add(jLabel49);
        jLabel49.setBounds(0, 260, 50, 20);

        SelectedRouteTextBox.setEditable(false);
        ControlPanel.add(SelectedRouteTextBox);
        SelectedRouteTextBox.setBounds(50, 300, 90, 20);

        OpenRouteGUIButton.setBackground(new java.awt.Color(204, 204, 204));
        OpenRouteGUIButton.setText("Route Editor");
        OpenRouteGUIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenRouteGUIButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(OpenRouteGUIButton);
        OpenRouteGUIButton.setBounds(50, 363, 170, 60);

        RouteEnabledButtonLight.setBackground(new java.awt.Color(255, 102, 102));
        RouteEnabledButtonLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout RouteEnabledButtonLightLayout = new javax.swing.GroupLayout(RouteEnabledButtonLight);
        RouteEnabledButtonLight.setLayout(RouteEnabledButtonLightLayout);
        RouteEnabledButtonLightLayout.setHorizontalGroup(
            RouteEnabledButtonLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        RouteEnabledButtonLightLayout.setVerticalGroup(
            RouteEnabledButtonLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        ControlPanel.add(RouteEnabledButtonLight);
        RouteEnabledButtonLight.setBounds(240, 300, 40, 20);

        EnableRouteButton.setBackground(new java.awt.Color(204, 204, 204));
        EnableRouteButton.setText("SET");
        EnableRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnableRouteButtonActionPerformed(evt);
            }
        });
        ControlPanel.add(EnableRouteButton);
        EnableRouteButton.setBounds(150, 300, 60, 20);

        jTabbedPane1.addTab("Controls", ControlPanel);

        WaypointPanel.setLayout(null);

        WaypointSearchButton.setBackground(new java.awt.Color(148, 207, 236));
        WaypointSearchButton.setText("Search");
        WaypointSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WaypointSearchButtonActionPerformed(evt);
            }
        });
        WaypointPanel.add(WaypointSearchButton);
        WaypointSearchButton.setBounds(200, 10, 80, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Once waypoint selected - shown in 'Controls' tab (DCT)");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        WaypointPanel.add(jLabel3);
        jLabel3.setBounds(0, 420, 290, 20);

        WaypointSearchTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        WaypointPanel.add(WaypointSearchTextField);
        WaypointSearchTextField.setBounds(110, 10, 80, 20);

        WaypointsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Waypoint", "Type", "LAT", "LONG"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        WaypointsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        WaypointsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(WaypointsTable);
        if (WaypointsTable.getColumnModel().getColumnCount() > 0) {
            WaypointsTable.getColumnModel().getColumn(0).setResizable(false);
            WaypointsTable.getColumnModel().getColumn(1).setResizable(false);
            WaypointsTable.getColumnModel().getColumn(2).setResizable(false);
            WaypointsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        WaypointPanel.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 270, 200);

        SelectSelectedWaypointButton.setBackground(new java.awt.Color(238, 238, 238));
        SelectSelectedWaypointButton.setText("Select");
        SelectSelectedWaypointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectSelectedWaypointButtonActionPerformed(evt);
            }
        });
        WaypointPanel.add(SelectSelectedWaypointButton);
        SelectSelectedWaypointButton.setBounds(10, 260, 70, 20);
        WaypointPanel.add(jSeparator7);
        jSeparator7.setBounds(0, 250, 300, 10);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Waypoint Name:");
        jLabel25.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        WaypointPanel.add(jLabel25);
        jLabel25.setBounds(10, 10, 100, 20);

        SelectedWaypointNameTextField.setEditable(false);
        SelectedWaypointNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        WaypointPanel.add(SelectedWaypointNameTextField);
        SelectedWaypointNameTextField.setBounds(150, 260, 70, 20);

        WaypointSelectedLight.setBackground(new java.awt.Color(255, 102, 102));
        WaypointSelectedLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout WaypointSelectedLightLayout = new javax.swing.GroupLayout(WaypointSelectedLight);
        WaypointSelectedLight.setLayout(WaypointSelectedLightLayout);
        WaypointSelectedLightLayout.setHorizontalGroup(
            WaypointSelectedLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        WaypointSelectedLightLayout.setVerticalGroup(
            WaypointSelectedLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        WaypointPanel.add(WaypointSelectedLight);
        WaypointSelectedLight.setBounds(240, 260, 40, 20);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Selected:");
        jLabel27.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        WaypointPanel.add(jLabel27);
        jLabel27.setBounds(80, 260, 70, 20);

        jPanel28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel28.setLayout(null);

        jPanel22.setBackground(new java.awt.Color(255, 255, 255));
        jPanel22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel22.setLayout(null);

        ShowSelectedTypeLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ShowSelectedTypeLabel.setText("N/A");
        jPanel22.add(ShowSelectedTypeLabel);
        ShowSelectedTypeLabel.setBounds(60, 10, 50, 13);

        jSeparator10.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator10.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel22.add(jSeparator10);
        jSeparator10.setBounds(50, 0, 10, 30);

        typelabel1jlabel.setText("TYPE:");
        jPanel22.add(typelabel1jlabel);
        typelabel1jlabel.setBounds(10, 10, 40, 14);

        jPanel28.add(jPanel22);
        jPanel22.setBounds(140, 70, 120, 30);

        jPanel21.setBackground(new java.awt.Color(255, 255, 255));
        jPanel21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel21.setLayout(null);

        ShowSelectedLongLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ShowSelectedLongLabel.setText("00.0000");
        jPanel21.add(ShowSelectedLongLabel);
        ShowSelectedLongLabel.setBounds(60, 10, 60, 13);

        jSeparator9.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel21.add(jSeparator9);
        jSeparator9.setBounds(50, 0, 10, 30);

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel28.setText("LONG:");
        jPanel21.add(jLabel28);
        jLabel28.setBounds(10, 10, 40, 14);

        jPanel28.add(jPanel21);
        jPanel21.setBounds(140, 30, 120, 30);

        jPanel23.setBackground(new java.awt.Color(255, 255, 255));
        jPanel23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel23.setLayout(null);

        ShowSelectedLatLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ShowSelectedLatLabel.setText("00.0000");
        jPanel23.add(ShowSelectedLatLabel);
        ShowSelectedLatLabel.setBounds(50, 10, 60, 14);

        jSeparator11.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator11.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel23.add(jSeparator11);
        jSeparator11.setBounds(40, 0, 10, 30);

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel32.setText("LAT:");
        jPanel23.add(jLabel32);
        jLabel32.setBounds(10, 10, 40, 13);

        jPanel28.add(jPanel23);
        jPanel23.setBounds(10, 30, 120, 30);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Info:");
        jPanel28.add(jLabel22);
        jLabel22.setBounds(0, 10, 270, 14);

        WaypointPanel.add(jPanel28);
        jPanel28.setBounds(10, 290, 270, 110);

        jTabbedPane1.addTab("Waypoints", WaypointPanel);

        FlightPanel.setLayout(null);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Serial:");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FlightPanel.add(jLabel7);
        jLabel7.setBounds(0, 30, 50, 20);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("TELEMETRY:");
        jLabel21.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FlightPanel.add(jLabel21);
        jLabel21.setBounds(0, 10, 290, 14);

        SerialConnectedLight.setBackground(new java.awt.Color(255, 102, 102));
        SerialConnectedLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout SerialConnectedLightLayout = new javax.swing.GroupLayout(SerialConnectedLight);
        SerialConnectedLight.setLayout(SerialConnectedLightLayout);
        SerialConnectedLightLayout.setHorizontalGroup(
            SerialConnectedLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        SerialConnectedLightLayout.setVerticalGroup(
            SerialConnectedLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        FlightPanel.add(SerialConnectedLight);
        SerialConnectedLight.setBounds(50, 30, 40, 20);
        FlightPanel.add(jSeparator6);
        jSeparator6.setBounds(0, 370, 300, 10);

        jLabel23.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("MODEL:");
        jLabel23.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FlightPanel.add(jLabel23);
        jLabel23.setBounds(0, 410, 50, 20);

        FlightPanel.add(ComboBoxCOM);
        ComboBoxCOM.setBounds(60, 380, 60, 20);

        ComRefreshButton.setBackground(new java.awt.Color(148, 207, 236));
        ComRefreshButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ComRefreshButton.setText("REFRESH");
        ComRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComRefreshButtonActionPerformed(evt);
            }
        });
        FlightPanel.add(ComRefreshButton);
        ComRefreshButton.setBounds(170, 410, 110, 20);

        ButtonOpenComPort.setBackground(java.awt.SystemColor.controlHighlight);
        ButtonOpenComPort.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ButtonOpenComPort.setText("OPEN");
        ButtonOpenComPort.setEnabled(false);
        ButtonOpenComPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOpenComPortActionPerformed(evt);
            }
        });
        FlightPanel.add(ButtonOpenComPort);
        ButtonOpenComPort.setBounds(130, 380, 70, 20);

        ButtonCloseComPort.setBackground(java.awt.SystemColor.controlHighlight);
        ButtonCloseComPort.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ButtonCloseComPort.setText("CLOSE");
        ButtonCloseComPort.setEnabled(false);
        ButtonCloseComPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCloseComPortActionPerformed(evt);
            }
        });
        FlightPanel.add(ButtonCloseComPort);
        ButtonCloseComPort.setBounds(210, 380, 70, 20);

        jLabel24.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("COM:");
        jLabel24.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FlightPanel.add(jLabel24);
        jLabel24.setBounds(0, 380, 50, 20);

        ComboBoxHardwareInterfaceType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PROTOTYPE" }));
        FlightPanel.add(ComboBoxHardwareInterfaceType);
        ComboBoxHardwareInterfaceType.setBounds(60, 410, 100, 20);

        TestSerialButton.setBackground(new java.awt.Color(255, 204, 153));
        TestSerialButton.setText("TEST SERIAL");
        TestSerialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestSerialButtonActionPerformed(evt);
            }
        });
        FlightPanel.add(TestSerialButton);
        TestSerialButton.setBounds(10, 70, 140, 23);

        SerialOutputTextArea.setEditable(false);
        SerialOutputTextArea.setColumns(20);
        SerialOutputTextArea.setRows(5);
        jScrollPane2.setViewportView(SerialOutputTextArea);

        FlightPanel.add(jScrollPane2);
        jScrollPane2.setBounds(10, 100, 270, 250);

        AutoscrollCheckBox.setSelected(true);
        AutoscrollCheckBox.setText("Autoscroll");
        AutoscrollCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoscrollCheckBoxActionPerformed(evt);
            }
        });
        FlightPanel.add(AutoscrollCheckBox);
        AutoscrollCheckBox.setBounds(200, 70, 90, 23);
        FlightPanel.add(jSeparator14);
        jSeparator14.setBounds(0, 60, 300, 10);

        jTabbedPane1.addTab("Flight", FlightPanel);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 0, 300, 470);

        jButton5.setBackground(new java.awt.Color(255, 153, 102));
        jButton5.setText("ABORT FLIGHT");
        getContentPane().add(jButton5);
        jButton5.setBounds(0, 470, 300, 20);

        jPanel6.setBackground(new java.awt.Color(51, 51, 51));
        jPanel6.setLayout(null);

        ArtificialHorizon.setBackground(new java.awt.Color(0, 153, 204));
        jPanel6.add(ArtificialHorizon);
        ArtificialHorizon.setBounds(10, 10, 200, 200);

        getContentPane().add(jPanel6);
        jPanel6.setBounds(310, 10, 220, 220);

        PowerAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        PowerAnnunciatorLight.setLayout(null);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("POWER");
        PowerAnnunciatorLight.add(jLabel8);
        jLabel8.setBounds(10, 0, 80, 20);

        jPanel9.setBackground(new java.awt.Color(204, 204, 204));
        jPanel9.setLayout(null);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("ALTITUDE");
        jPanel9.add(jLabel10);
        jLabel10.setBounds(10, 0, 80, 20);

        PowerAnnunciatorLight.add(jPanel9);
        jPanel9.setBounds(310, 240, 100, 20);

        getContentPane().add(PowerAnnunciatorLight);
        PowerAnnunciatorLight.setBounds(310, 300, 100, 20);

        SerialAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        SerialAnnunciatorLight.setLayout(null);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("SERIAL");
        SerialAnnunciatorLight.add(jLabel9);
        jLabel9.setBounds(10, 0, 200, 20);

        getContentPane().add(SerialAnnunciatorLight);
        SerialAnnunciatorLight.setBounds(310, 240, 220, 20);

        AltimeterAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        AltimeterAnnunciatorLight.setLayout(null);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("ALTIMETER");
        AltimeterAnnunciatorLight.add(jLabel11);
        jLabel11.setBounds(10, 0, 80, 20);

        jPanel11.setBackground(new java.awt.Color(204, 204, 204));
        jPanel11.setLayout(null);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("ALTITUDE");
        jPanel11.add(jLabel12);
        jLabel12.setBounds(10, 0, 80, 20);

        AltimeterAnnunciatorLight.add(jPanel11);
        jPanel11.setBounds(310, 240, 100, 20);

        getContentPane().add(AltimeterAnnunciatorLight);
        AltimeterAnnunciatorLight.setBounds(310, 330, 100, 20);

        CompassAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        CompassAnnunciatorLight.setLayout(null);

        jLabel13.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText(" COMPASS");
        CompassAnnunciatorLight.add(jLabel13);
        jLabel13.setBounds(10, 0, 80, 20);

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));
        jPanel13.setLayout(null);

        jLabel14.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("ALTITUDE");
        jPanel13.add(jLabel14);
        jLabel14.setBounds(10, 0, 80, 20);

        CompassAnnunciatorLight.add(jPanel13);
        jPanel13.setBounds(310, 240, 100, 20);

        getContentPane().add(CompassAnnunciatorLight);
        CompassAnnunciatorLight.setBounds(430, 360, 100, 20);

        PitotAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        PitotAnnunciatorLight.setLayout(null);

        jLabel16.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("PITOT");
        PitotAnnunciatorLight.add(jLabel16);
        jLabel16.setBounds(10, 0, 80, 20);

        getContentPane().add(PitotAnnunciatorLight);
        PitotAnnunciatorLight.setBounds(430, 300, 100, 20);

        GyroAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        GyroAnnunciatorLight.setLayout(null);

        jLabel17.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("GYRO");
        GyroAnnunciatorLight.add(jLabel17);
        jLabel17.setBounds(10, 0, 80, 20);

        jPanel16.setBackground(new java.awt.Color(204, 204, 204));
        jPanel16.setLayout(null);

        jLabel18.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("ALTITUDE");
        jPanel16.add(jLabel18);
        jLabel18.setBounds(10, 0, 80, 20);

        GyroAnnunciatorLight.add(jPanel16);
        jPanel16.setBounds(310, 240, 100, 20);

        getContentPane().add(GyroAnnunciatorLight);
        GyroAnnunciatorLight.setBounds(430, 330, 100, 20);

        GPSAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        GPSAnnunciatorLight.setLayout(null);

        jLabel19.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("GPS");
        GPSAnnunciatorLight.add(jLabel19);
        jLabel19.setBounds(10, 0, 80, 20);

        jPanel18.setBackground(new java.awt.Color(204, 204, 204));
        jPanel18.setLayout(null);

        jLabel20.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("ALTITUDE");
        jPanel18.add(jLabel20);
        jLabel20.setBounds(10, 0, 80, 20);

        GPSAnnunciatorLight.add(jPanel18);
        jPanel18.setBounds(310, 240, 100, 20);

        getContentPane().add(GPSAnnunciatorLight);
        GPSAnnunciatorLight.setBounds(310, 360, 100, 20);

        RadioAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        RadioAnnunciatorLight.setLayout(null);

        jLabel29.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("RADIO LINK");
        RadioAnnunciatorLight.add(jLabel29);
        jLabel29.setBounds(10, 0, 200, 20);

        getContentPane().add(RadioAnnunciatorLight);
        RadioAnnunciatorLight.setBounds(310, 270, 220, 20);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(null);

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(null);

        jLabel30.setBackground(new java.awt.Color(255, 204, 51));
        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 204, 51));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("HEIGHT: (Feet)");
        jPanel4.add(jLabel30);
        jLabel30.setBounds(0, 10, 100, 14);

        jPanel3.add(jPanel4);
        jPanel4.setBounds(0, 0, 100, 30);

        HeightReadoutLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        HeightReadoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HeightReadoutLabel.setText("0000");
        jPanel3.add(HeightReadoutLabel);
        HeightReadoutLabel.setBounds(10, 40, 80, 20);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setLayout(null);

        jPanel8.setBackground(new java.awt.Color(51, 51, 51));
        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel8.setLayout(null);

        jLabel34.setBackground(new java.awt.Color(255, 204, 51));
        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 204, 51));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("ALTITUDE:");
        jPanel8.add(jLabel34);
        jLabel34.setBounds(10, 10, 100, 14);

        jPanel5.add(jPanel8);
        jPanel8.setBounds(0, 0, 120, 30);

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel35.setText("0000");
        jPanel5.add(jLabel35);
        jLabel35.setBounds(10, 40, 70, 20);

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("ft");
        jPanel5.add(jLabel36);
        jLabel36.setBounds(80, 40, 30, 20);

        jPanel3.add(jPanel5);
        jPanel5.setBounds(540, 10, 120, 70);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(540, 10, 100, 70);

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel19.setLayout(null);

        jPanel25.setBackground(new java.awt.Color(51, 51, 51));
        jPanel25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel25.setLayout(null);

        jLabel37.setBackground(new java.awt.Color(255, 204, 51));
        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 204, 51));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("HDG: (Deg)");
        jPanel25.add(jLabel37);
        jLabel37.setBounds(0, 10, 100, 14);

        jPanel19.add(jPanel25);
        jPanel25.setBounds(0, 0, 100, 30);

        HeadingReadoutLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        HeadingReadoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HeadingReadoutLabel.setText("360");
        jPanel19.add(HeadingReadoutLabel);
        HeadingReadoutLabel.setBounds(30, 40, 40, 20);

        jPanel26.setBackground(new java.awt.Color(255, 255, 255));
        jPanel26.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel26.setLayout(null);

        jPanel27.setBackground(new java.awt.Color(51, 51, 51));
        jPanel27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel27.setLayout(null);

        jLabel40.setBackground(new java.awt.Color(255, 204, 51));
        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 204, 51));
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("ALTITUDE:");
        jPanel27.add(jLabel40);
        jLabel40.setBounds(10, 10, 100, 14);

        jPanel26.add(jPanel27);
        jPanel27.setBounds(0, 0, 120, 30);

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel41.setText("0000");
        jPanel26.add(jLabel41);
        jLabel41.setBounds(10, 40, 70, 20);

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("ft");
        jPanel26.add(jLabel42);
        jLabel42.setBounds(80, 40, 30, 20);

        jPanel19.add(jPanel26);
        jPanel26.setBounds(540, 10, 120, 70);

        getContentPane().add(jPanel19);
        jPanel19.setBounds(760, 10, 100, 70);

        jPanel29.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel29.setLayout(null);

        jLabel31.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("QNH:");
        jPanel29.add(jLabel31);
        jLabel31.setBounds(10, 40, 50, 20);

        SetQNHTextField.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        SetQNHTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        SetQNHTextField.setText("1013.25");
        SetQNHTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetQNHTextFieldActionPerformed(evt);
            }
        });
        jPanel29.add(SetQNHTextField);
        SetQNHTextField.setBounds(60, 40, 50, 19);

        HectopascalRadioButton.setSelected(true);
        HectopascalRadioButton.setText("hPa");
        HectopascalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HectopascalRadioButtonActionPerformed(evt);
            }
        });
        jPanel29.add(HectopascalRadioButton);
        HectopascalRadioButton.setBounds(60, 60, 50, 20);

        InchesMercRadioButton.setText("inHg");
        InchesMercRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InchesMercRadioButtonActionPerformed(evt);
            }
        });
        jPanel29.add(InchesMercRadioButton);
        InchesMercRadioButton.setBounds(10, 60, 70, 20);

        StandardPressureButton.setBackground(new java.awt.Color(183, 196, 222));
        StandardPressureButton.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        StandardPressureButton.setText("STD");
        StandardPressureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StandardPressureButtonActionPerformed(evt);
            }
        });
        jPanel29.add(StandardPressureButton);
        StandardPressureButton.setBounds(60, 10, 50, 20);

        QNHUpdateButton.setBackground(new java.awt.Color(204, 204, 204));
        QNHUpdateButton.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        QNHUpdateButton.setText("SET");
        QNHUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QNHUpdateButtonActionPerformed(evt);
            }
        });
        jPanel29.add(QNHUpdateButton);
        QNHUpdateButton.setBounds(10, 10, 50, 20);

        getContentPane().add(jPanel29);
        jPanel29.setBounds(550, 290, 120, 90);

        jPanel30.setBackground(new java.awt.Color(255, 255, 255));
        jPanel30.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel30.setLayout(null);
        getContentPane().add(jPanel30);
        jPanel30.setBounds(650, 90, 0, 80);

        jPanel31.setBackground(new java.awt.Color(255, 255, 255));
        jPanel31.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel31.setLayout(null);

        jPanel32.setBackground(new java.awt.Color(255, 153, 153));
        jPanel32.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel32.setLayout(null);

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel46.setText("Autopilot Variables:");
        jPanel32.add(jLabel46);
        jLabel46.setBounds(0, 10, 140, 14);

        jPanel31.add(jPanel32);
        jPanel32.setBounds(0, 0, 140, 30);

        jLabel47.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel47.setText("RTE      :");
        jPanel31.add(jLabel47);
        jLabel47.setBounds(20, 160, 60, 14);

        jLabel51.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel51.setText("Altitude :");
        jPanel31.add(jLabel51);
        jLabel51.setBounds(20, 40, 70, 14);

        jLabel55.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel55.setText("Heading :");
        jPanel31.add(jLabel55);
        jLabel55.setBounds(20, 70, 70, 14);

        AutopilotVariableRouteReadout.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AutopilotVariableRouteReadout.setText("N/a");
        jPanel31.add(AutopilotVariableRouteReadout);
        AutopilotVariableRouteReadout.setBounds(80, 160, 50, 14);

        jLabel57.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel57.setText("Speed   :");
        jPanel31.add(jLabel57);
        jLabel57.setBounds(20, 100, 60, 14);

        AutopilotVariableAltitudeReadout.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AutopilotVariableAltitudeReadout.setText("0000");
        jPanel31.add(AutopilotVariableAltitudeReadout);
        AutopilotVariableAltitudeReadout.setBounds(80, 40, 50, 14);

        AutopilotVariableSpeedReadout.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AutopilotVariableSpeedReadout.setText("000");
        jPanel31.add(AutopilotVariableSpeedReadout);
        AutopilotVariableSpeedReadout.setBounds(80, 100, 30, 14);

        AutopilotVariableHeadingReadout.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AutopilotVariableHeadingReadout.setText("360");
        jPanel31.add(AutopilotVariableHeadingReadout);
        AutopilotVariableHeadingReadout.setBounds(80, 70, 30, 14);
        jPanel31.add(jSeparator15);
        jSeparator15.setBounds(0, 150, 140, 10);
        jPanel31.add(jSeparator16);
        jSeparator16.setBounds(0, 60, 140, 10);
        jPanel31.add(jSeparator17);
        jSeparator17.setBounds(0, 90, 140, 10);
        jPanel31.add(jSeparator18);
        jSeparator18.setBounds(0, 120, 140, 10);

        jLabel61.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel61.setText("WAY     :");
        jPanel31.add(jLabel61);
        jLabel61.setBounds(20, 130, 60, 14);

        AutopilotVariableWaypointReadout.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AutopilotVariableWaypointReadout.setText("N/a");
        jPanel31.add(AutopilotVariableWaypointReadout);
        AutopilotVariableWaypointReadout.setBounds(80, 130, 50, 14);

        getContentPane().add(jPanel31);
        jPanel31.setBounds(540, 90, 140, 190);

        AutopilotEngaugedAnnunciatorLight.setBackground(new java.awt.Color(204, 204, 204));
        AutopilotEngaugedAnnunciatorLight.setLayout(null);

        jLabel39.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("AUTOPILOT");
        AutopilotEngaugedAnnunciatorLight.add(jLabel39);
        jLabel39.setBounds(10, 0, 200, 30);

        getContentPane().add(AutopilotEngaugedAnnunciatorLight);
        AutopilotEngaugedAnnunciatorLight.setBounds(310, 390, 220, 30);

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel20.setLayout(null);

        jPanel34.setBackground(new java.awt.Color(51, 51, 51));
        jPanel34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel34.setLayout(null);

        jLabel50.setBackground(new java.awt.Color(255, 204, 51));
        jLabel50.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(255, 204, 51));
        jLabel50.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel50.setText("SPEED: (Knots)");
        jPanel34.add(jLabel50);
        jLabel50.setBounds(0, 10, 100, 14);

        jPanel20.add(jPanel34);
        jPanel34.setBounds(0, 0, 100, 30);

        SpeedReadoutLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        SpeedReadoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SpeedReadoutLabel.setText("000");
        jPanel20.add(SpeedReadoutLabel);
        SpeedReadoutLabel.setBounds(30, 40, 40, 20);

        jPanel35.setBackground(new java.awt.Color(255, 255, 255));
        jPanel35.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel35.setLayout(null);

        jPanel36.setBackground(new java.awt.Color(51, 51, 51));
        jPanel36.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel36.setLayout(null);

        jLabel52.setBackground(new java.awt.Color(255, 204, 51));
        jLabel52.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(255, 204, 51));
        jLabel52.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel52.setText("ALTITUDE:");
        jPanel36.add(jLabel52);
        jLabel52.setBounds(10, 10, 100, 14);

        jPanel35.add(jPanel36);
        jPanel36.setBounds(0, 0, 120, 30);

        jLabel53.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel53.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel53.setText("0000");
        jPanel35.add(jLabel53);
        jLabel53.setBounds(10, 40, 70, 20);

        jLabel54.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel54.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel54.setText("ft");
        jPanel35.add(jLabel54);
        jLabel54.setBounds(80, 40, 30, 20);

        jPanel20.add(jPanel35);
        jPanel35.setBounds(540, 10, 120, 70);

        getContentPane().add(jPanel20);
        jPanel20.setBounds(650, 10, 100, 70);

        jPanel33.setBackground(new java.awt.Color(255, 255, 255));
        jPanel33.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel33.setLayout(null);

        jPanel37.setBackground(new java.awt.Color(153, 204, 255));
        jPanel37.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel37.setLayout(null);

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel58.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel58.setText("Route Details:");
        jPanel37.add(jLabel58);
        jLabel58.setBounds(0, 10, 170, 14);

        jPanel33.add(jPanel37);
        jPanel37.setBounds(0, 0, 170, 30);

        NextWaypointReadoutLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        NextWaypointReadoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NextWaypointReadoutLabel.setText("XXXX");
        jPanel33.add(NextWaypointReadoutLabel);
        NextWaypointReadoutLabel.setBounds(0, 140, 170, 20);

        AutopilotVariableAltitudeReadout1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        AutopilotVariableAltitudeReadout1.setText("LAT:");
        jPanel33.add(AutopilotVariableAltitudeReadout1);
        AutopilotVariableAltitudeReadout1.setBounds(10, 60, 40, 14);

        RouteCurrentLatitudeReadoutLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        RouteCurrentLatitudeReadoutLabel.setText("00.0000");
        jPanel33.add(RouteCurrentLatitudeReadoutLabel);
        RouteCurrentLatitudeReadoutLabel.setBounds(40, 60, 50, 14);

        RouteCurrentLongitudeReadoutLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        RouteCurrentLongitudeReadoutLabel.setText("00.0000");
        jPanel33.add(RouteCurrentLongitudeReadoutLabel);
        RouteCurrentLongitudeReadoutLabel.setBounds(120, 60, 50, 14);

        AutopilotVariableAltitudeReadout4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        AutopilotVariableAltitudeReadout4.setText("LON:");
        jPanel33.add(AutopilotVariableAltitudeReadout4);
        AutopilotVariableAltitudeReadout4.setBounds(90, 60, 40, 14);
        jPanel33.add(jSeparator21);
        jSeparator21.setBounds(0, 50, 170, 10);

        jLabel63.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel63.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel63.setText("Current Position");
        jPanel33.add(jLabel63);
        jLabel63.setBounds(0, 30, 170, 20);
        jPanel33.add(ProgressToWaypointBar);
        ProgressToWaypointBar.setBounds(10, 170, 150, 20);

        AutopilotVariableAltitudeReadout5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        AutopilotVariableAltitudeReadout5.setText("LAT:");
        jPanel33.add(AutopilotVariableAltitudeReadout5);
        AutopilotVariableAltitudeReadout5.setBounds(10, 220, 40, 14);

        LatitudeOfWaypointLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        LatitudeOfWaypointLabel.setText("00.0000");
        jPanel33.add(LatitudeOfWaypointLabel);
        LatitudeOfWaypointLabel.setBounds(40, 220, 50, 14);

        AutopilotVariableAltitudeReadout7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        AutopilotVariableAltitudeReadout7.setText("LON:");
        jPanel33.add(AutopilotVariableAltitudeReadout7);
        AutopilotVariableAltitudeReadout7.setBounds(90, 220, 40, 14);

        LongitudeOfWaypointLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        LongitudeOfWaypointLabel.setText("00.0000");
        jPanel33.add(LongitudeOfWaypointLabel);
        LongitudeOfWaypointLabel.setBounds(120, 220, 50, 14);

        AutopilotVariableAltitudeReadout9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        AutopilotVariableAltitudeReadout9.setText("DIS:");
        jPanel33.add(AutopilotVariableAltitudeReadout9);
        AutopilotVariableAltitudeReadout9.setBounds(40, 240, 40, 14);

        DistanceToWaypointLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        DistanceToWaypointLabel.setText("0000.00 km");
        jPanel33.add(DistanceToWaypointLabel);
        DistanceToWaypointLabel.setBounds(70, 240, 50, 14);

        AutopilotVariableAltitudeReadout11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        AutopilotVariableAltitudeReadout11.setText("HDG:");
        jPanel33.add(AutopilotVariableAltitudeReadout11);
        AutopilotVariableAltitudeReadout11.setBounds(60, 260, 40, 14);

        BearingToWaypointLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        BearingToWaypointLabel.setText("000");
        jPanel33.add(BearingToWaypointLabel);
        BearingToWaypointLabel.setBounds(90, 260, 50, 14);

        AutopilotVariableAltitudeReadout13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        AutopilotVariableAltitudeReadout13.setText("ETA:");
        jPanel33.add(AutopilotVariableAltitudeReadout13);
        AutopilotVariableAltitudeReadout13.setBounds(30, 200, 40, 14);

        TimeToWaypointLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        TimeToWaypointLabel.setText("00h : 00m : 00s");
        jPanel33.add(TimeToWaypointLabel);
        TimeToWaypointLabel.setBounds(60, 200, 100, 14);

        ExecutedRouteReadoutLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ExecutedRouteReadoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ExecutedRouteReadoutLabel.setText("XXXX");
        jPanel33.add(ExecutedRouteReadoutLabel);
        ExecutedRouteReadoutLabel.setBounds(0, 100, 170, 20);

        jLabel65.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel65.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel65.setText("Next Waypoint");
        jPanel33.add(jLabel65);
        jLabel65.setBounds(0, 120, 170, 20);

        RouteStatusLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        RouteStatusLight.setLayout(null);

        RouteOrDirectWaypointLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RouteOrDirectWaypointLabel.setText("ROUTE");
        RouteStatusLight.add(RouteOrDirectWaypointLabel);
        RouteOrDirectWaypointLabel.setBounds(10, 0, 150, 20);

        jPanel33.add(RouteStatusLight);
        RouteStatusLight.setBounds(0, 80, 170, 20);

        jLabel33.setText("°");
        jPanel33.add(jLabel33);
        jLabel33.setBounds(110, 260, 40, 14);

        getContentPane().add(jPanel33);
        jPanel33.setBounds(690, 90, 170, 290);

        DirectSetLight1.setBackground(new java.awt.Color(255, 102, 102));
        DirectSetLight1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout DirectSetLight1Layout = new javax.swing.GroupLayout(DirectSetLight1);
        DirectSetLight1.setLayout(DirectSetLight1Layout);
        DirectSetLight1Layout.setHorizontalGroup(
            DirectSetLight1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        DirectSetLight1Layout.setVerticalGroup(
            DirectSetLight1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        getContentPane().add(DirectSetLight1);
        DirectSetLight1.setBounds(240, 260, 40, 20);

        jMenuAutopilot.setText("Autopilot");

        jMenuItemAutopilotDisconnect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItemAutopilotDisconnect.setText("Disconnect");
        jMenuItemAutopilotDisconnect.setEnabled(false);
        jMenuItemAutopilotDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAutopilotDisconnectActionPerformed(evt);
            }
        });
        jMenuAutopilot.add(jMenuItemAutopilotDisconnect);
        jMenuAutopilot.add(jSeparator1);

        jMenuItemDisconnect1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemDisconnect1.setText("ABORT FLIGHT");
        jMenuItemDisconnect1.setEnabled(false);
        jMenuItemDisconnect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDisconnect1ActionPerformed(evt);
            }
        });
        jMenuAutopilot.add(jMenuItemDisconnect1);

        MenuBarMain.add(jMenuAutopilot);

        jMenuRoute.setText("Route");

        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuRoute.add(jMenuItemOpen);
        jMenuRoute.add(jSeparator2);

        jMenuItemCreateRoute.setText("Create");
        jMenuRoute.add(jMenuItemCreateRoute);

        jMenuItemCreateRoute2.setText("Edit");
        jMenuRoute.add(jMenuItemCreateRoute2);

        MenuBarMain.add(jMenuRoute);

        setJMenuBar(MenuBarMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemAutopilotDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAutopilotDisconnectActionPerformed
        autopilotVars.AutopilotMaster = false;
        AutopilotMasterLight.setBackground(RedLight);
        jMenuItemAutopilotDisconnect.setEnabled(false);
    }//GEN-LAST:event_jMenuItemAutopilotDisconnectActionPerformed

    private void jMenuItemDisconnect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDisconnect1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemDisconnect1ActionPerformed

    private void SetAltitudeAutopilotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetAltitudeAutopilotButtonActionPerformed
        try{
            int userAltitude = Integer.parseInt(AltitudeInputTextbox.getText());
            
            if(AltitudeSetLight.getBackground().equals(RedLight) || AltitudeSetLight.getBackground().equals(OrangeLight) || (userAltitude != autopilotVars.altitudeSet)){

                autopilotVars.altitudeSet = userAltitude;
                autopilotVars.holdCurrentAltitude = false;
                
                AutopilotVariableAltitudeReadout.setText(String.valueOf(userAltitude));
                
                AltitudeSetLight.setBackground(GreenLight);
                AltitudeHoldButton.setBackground(GreyLight);
            }
            else{
                AltitudeSetLight.setBackground(RedLight);
            }
        }
        catch(Exception e){
            wrongInput();
        }
    }//GEN-LAST:event_SetAltitudeAutopilotButtonActionPerformed

    private void SpeedHoldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpeedHoldButtonActionPerformed
        if(!autopilotVars.holdCurrentSpeed){
            autopilotVars.holdCurrentSpeed = true;
            
            int currentSpeed = Integer.valueOf(SpeedReadoutLabel.getText());
            
            autopilotVars.speedSet = currentSpeed;
            AutopilotVariableSpeedReadout.setText(String.valueOf(currentSpeed));
            
            SpeedHoldButton.setBackground(GreenLight); // Set button to Green
            SpeedSetLight.setBackground(OrangeLight); // Light set to show HOLD active
        }
        else{
            autopilotVars.holdCurrentSpeed = false;
            
            SpeedHoldButton.setBackground(GreyLight); // Set button to Grey
            SpeedSetLight.setBackground(RedLight); // Light set to show HOLD unactive
            
        }
    }//GEN-LAST:event_SpeedHoldButtonActionPerformed
    
    public void SearchDatabaseTable(){
            //JSON Parser object
        JSONParser parser = new JSONParser();
        
        try{
            //Parse the waypoint JSON file
            Object obj = parser.parse(new FileReader("waypoints.json"));
            
            JSONArray Waypoints = (JSONArray) obj;
            
            //Just testing my code
            //Find the index of the data wanted
//            for(int i = 0; i < Waypoints.size(); i++) {
//                JSONObject Point = (JSONObject) Waypoints.get(i);
//                
//                if(Point.get("name").equals("EGKK")){
//                    System.out.println(Point.get("coords"));
//                }
//            }

            //Force uppercase incase people forget to press SHIFT
            String WaypointSearchEntry = WaypointSearchTextField.getText().toUpperCase();
            
            //Allow to add new rows
            DefaultTableModel WaypointsModel = (DefaultTableModel) WaypointsTable.getModel();
            WaypointsModel.setRowCount(0);
            
            
            for(int i = 0; i < Waypoints.size(); i++) {
                
                JSONObject CurrentTableWaypoint = (JSONObject) Waypoints.get(i);
                
                //Set the currently selected waypoint to a String
                String WaypointName = CurrentTableWaypoint.get("name").toString();
                
                if(WaypointName.startsWith(WaypointSearchEntry)){
                    
                    //Get Waypoint Type
                    String WaypointType = CurrentTableWaypoint.get("type").toString();
                    
                    //In funny format in JSOn file - thus conversion to some workable numbers! LONG / LAT <- Be careful!
                    String StringWaypointCoords = CurrentTableWaypoint.get("coords").toString();
                    double[] WaypointCoords = Arrays.stream((StringWaypointCoords.substring(1,StringWaypointCoords.length()-1)).split(",")).mapToDouble(Double::parseDouble).toArray();;
                    //Make it tidy so I can refer which one is which otherwise I will make mistakes!
                    double WaypointLAT = WaypointCoords[1];
                    double WaypointLONG = WaypointCoords[0];
                    
                    
                    //In object form I can have different types for what I set the table to expect
                    Object[] newRow = {WaypointName,WaypointType,WaypointLAT,WaypointLONG};
                    WaypointsModel.addRow(newRow);
                    
                }
                
            }
            
            //JSONObject test = (JSONObject) Airport.get(1).name;
            
            //System.out.println(test);
            
            
            //WaypointsTable.setModel(data);
            
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    
    private void WaypointSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WaypointSearchButtonActionPerformed
        SearchDatabaseTable();
    }//GEN-LAST:event_WaypointSearchButtonActionPerformed

    private void DirectToWaypointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectToWaypointButtonActionPerformed
        if((!autopilotVars.directWaypointName.equals(""))){
            
            if(autopilotVars.directToWaypoint != true){
                
                String directWaypointName = DirectWaypointNameTextField.getText();
                //If the direct to the waypoint button is depressed

                DirectSetLight.setBackground(GreenLight); // Set DIRECT light to green

                autopilotVars.holdCurrentHeading = false;
                
                autopilotVars.directToWaypoint = true;
                autopilotVars.directWaypointName = directWaypointName;
                
                AutopilotVariableWaypointReadout.setText(directWaypointName);
                
                HeadingHoldButton.setBackground(GreyLight); // Set button to Grey
                HeadingSetLight.setBackground(MagentaLight); // Light set to show DIRECT to waypoint
                
                RouteEnabledButtonLight.setBackground(RedLight);
                RouteEnabled = false;
                
                initialDistanceFromWaypoint = -1; // Reset distance
                
                AutopilotVariableRouteReadout.setText("N/a");
                
            }
            else{
                autopilotVars.directToWaypoint = false;
                DirectSetLight.setBackground(RedLight);
                HeadingSetLight.setBackground(RedLight);
            }
        }
        else{
            System.out.println("No Waypoint Selected");
        }
    }//GEN-LAST:event_DirectToWaypointButtonActionPerformed

    private void ComRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComRefreshButtonActionPerformed
        //Get list of all ports
        SerialPort[] Ports = SerialPort.getCommPorts();
        
        //Remove all items such that the combo box is empty
        ComboBoxCOM.removeAllItems();
        
        //Add ports to combo box
        if((Ports != null) && (Ports.length > 0)) {
            for(SerialPort COMport : Ports) {

                ComboBoxCOM.addItem(COMport.getSystemPortName());
                
            }
        }
        ButtonOpenComPort.setEnabled(true);
        ButtonOpenComPort.setBackground(GreenLight);
    }//GEN-LAST:event_ComRefreshButtonActionPerformed
    private void ButtonOpenComPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOpenComPortActionPerformed
        //Set com port to use
        ActiveSerialPort = SerialPort.getCommPort(ComboBoxCOM.getItemAt(ComboBoxCOM.getSelectedIndex()));
        
        //Chose from list of hardware options if I ever make another version (better)
        switch(ComboBoxHardwareInterfaceType.getItemAt(ComboBoxHardwareInterfaceType.getSelectedIndex())){
            
            case "PROTOTYPE":
                ActiveSerialPort.setComPortParameters(9600, 8, 1, 0);
                ActiveSerialPort.setComPortTimeouts(SerialPort.TIMEOUT_WRITE_BLOCKING, 0, 0);
                break;
                
            default:
                System.out.println("NO PORT!");
                return;
            
        }
        
        //Open serial port
        ActiveSerialPort.openPort();
        
        ActiveSerialPort.addDataListener(new SerialPortDataListener() {
        
            
            
            
            //Required overrrides for data reading events to be triggered by library
            
            @Override
            public int getListeningEvents() {
                return SerialPort.LISTENING_EVENT_DATA_RECEIVED;
            }

            
            //Decide what to do with incoming serial data here from autopilot
            @Override
            public void serialEvent(SerialPortEvent serialPortEvent) {
                if (serialPortEvent.getEventType() == SerialPort.LISTENING_EVENT_DATA_RECEIVED){
                    
                    //Recieve bytes
                    byte [] recievedData = serialPortEvent.getReceivedData();
                    String serialMessage = new String(recievedData);
                    
                    //Send to method to interpret the data
                    TranslateTelemetry(serialMessage);
                    
                    String dataToTransmit = collectTelemetry();
                    
                    ActiveSerialPort.writeBytes(dataToTransmit.getBytes(), dataToTransmit.length());
                    
                    SerialOutputTextArea.append("TX: " + dataToTransmit + "\n");
                }
            }
        });
        
        isSerialPortOpen = true;
        System.out.println("Port has opened");
        
        //Text Display
        SerialOutputTextArea.append("*Port has opened*\nBaud: " + ActiveSerialPort.getBaudRate() + "\n- - - - - - - - - -\n");
        
        //Enable / disable user from changing parameters
        ButtonCloseComPort.setEnabled(true);
        ButtonOpenComPort.setEnabled(false);
        ComRefreshButton.setEnabled(false);
        ComboBoxHardwareInterfaceType.setEnabled(false);
        ComboBoxCOM.setEnabled(false);
        
        ArtificialHorizon.repaint();
        
        SerialConnectedLight.setBackground(GreenLight);
        SerialAnnunciatorLight.setBackground(GreenLight);
        
        //Amber
        PowerAnnunciatorLight.setBackground(AmberLight);
        RadioAnnunciatorLight.setBackground(AmberLight);
                
        autopilotVars.serialConnected = true;
        
    }//GEN-LAST:event_ButtonOpenComPortActionPerformed
    public double[] findDetailsOfWaypoint(String waypoint){
        JSONParser parser = new JSONParser();
        
        // [LAT] [LONG]
        double[] WaypointCoords = null;
        
        try{
            
            //Parse the waypoint JSON file
            Object obj = parser.parse(new FileReader("waypoints.json"));
            
            JSONArray Waypoints = (JSONArray) obj;
            
            for(int i = 0; i < Waypoints.size(); i++) {
                
                JSONObject CurrentTableWaypoint = (JSONObject) Waypoints.get(i);
                
                //Set the currently selected waypoint to a String
                String CurrentWaypointName = CurrentTableWaypoint.get("name").toString();
                
                if(CurrentWaypointName.startsWith(waypoint)){
                    
                    //In funny format in JSOn file - thus conversion to some workable numbers! LONG / LAT <- Be careful!
                    String StringWaypointCoords = CurrentTableWaypoint.get("coords").toString();
                    WaypointCoords = Arrays.stream((StringWaypointCoords.substring(1,StringWaypointCoords.length()-1)).split(",")).mapToDouble(Double::parseDouble).toArray();
                    
                }
                
            }
        }
        catch(Exception e){
            
        }
        
        return WaypointCoords;
    }
    
    public String collectTelemetry(){
        //Initialise: (Identify T as host)
        String dataToSend = "T";
        
        
        //Collecting variables in string format and if to activate
        String Altitude = String.format("%04d", autopilotVars.altitudeSet);
        
        String Speed = String.format("%03d", autopilotVars.speedSet);
        
        String Pressure = String.valueOf(autopilotVars.QNHset);
        
        int Bearing = 0;
        
        
        //Altitude
        dataToSend = dataToSend.concat("A" + Altitude);
        //Speed
        dataToSend = dataToSend.concat("S" + Speed);
        //Pressure
        dataToSend = dataToSend.concat("P" + Pressure);
        
        if(RouteEnabledButtonLight.getBackground().equals(GreenLight)){
            Bearing = Integer.valueOf(BearingToWaypointLabel.getText());
        }
        else{
            Bearing = Integer.valueOf(AutopilotVariableHeadingReadout.getText());
        }
        
        dataToSend = dataToSend.concat("H" + Bearing);
        
        
        return dataToSend;
    }
    
    public void TranslateTelemetry(String serialMessage){
        
        //Append new data to serial output monitor on autopilot
        SerialOutputTextArea.append("RX: " + serialMessage);

        //Check data is telemetry (R as reciever on aircrtaft)
        if(serialMessage.startsWith("R")){
            //Check radio connection established
            if(!autopilotVars.radioConnected){
                System.out.println("Radio Link Established");

                //Green lights
                autopilotVars.radioConnected = true;
                RadioAnnunciatorLight.setBackground(GreenLight);
                PowerAnnunciatorLight.setBackground(GreenLight);
                
                //Turn on specific sensors to amber for telemetry checking
                PitotAnnunciatorLight.setBackground(AmberLight);
                AltimeterAnnunciatorLight.setBackground(AmberLight);
                GyroAnnunciatorLight.setBackground(AmberLight);
                GPSAnnunciatorLight.setBackground(AmberLight);
                CompassAnnunciatorLight.setBackground(AmberLight);
            }

            //Speed Recieved (S)
            if(serialMessage.contains("S")){
                String SpeedRecieved = serialMessage.substring(serialMessage.indexOf("S")+1, serialMessage.indexOf("S")+4);
                SpeedReadoutLabel.setText(SpeedRecieved);
                ArtSPD = Integer.parseInt(SpeedRecieved);
                
                PitotAnnunciatorLight.setBackground(GreenLight);
            }
            
            //Height Recieved (A)
            if(serialMessage.contains("A")){
                String HeightRecieved = serialMessage.substring(serialMessage.indexOf("A")+1, serialMessage.indexOf("A")+5);
                HeightReadoutLabel.setText(HeightRecieved);
                
                AltimeterAnnunciatorLight.setBackground(GreenLight);
            }
            
            //Heading Recieved (H)
            if(serialMessage.contains("H")){
                String HeadingRecieved = serialMessage.substring(serialMessage.indexOf("H")+1, serialMessage.indexOf("H")+4);
                HeadingReadoutLabel.setText(HeadingRecieved);
                ArtHDG = Integer.parseInt(HeadingRecieved);
                
                CompassAnnunciatorLight.setBackground(GreenLight);
            }
            
            //GPS Latitude (GL) and Longitude (GO)
            if(serialMessage.contains("GL") && serialMessage.contains("GO")){
                
                System.out.println(serialMessage.substring(serialMessage.indexOf("GL")+2, serialMessage.indexOf("GL")+9));
                
                String[] coordinatesRecieved = {serialMessage.substring(serialMessage.indexOf("GL")+2, serialMessage.indexOf("GL")+9) , serialMessage.substring(serialMessage.indexOf("GO")+2, serialMessage.indexOf("GO")+9)};
                
                double currentLat = Double.parseDouble(coordinatesRecieved[0]);
                double currentLong = Double.parseDouble(coordinatesRecieved[1]);
                
                
                RouteCurrentLatitudeReadoutLabel.setText(String.valueOf(currentLat));
                RouteCurrentLongitudeReadoutLabel.setText(String.valueOf(currentLong));
                
                GPSAnnunciatorLight.setBackground(GreenLight);
                
                updateRouteDetails(currentLat, currentLong);
                
//                //Check to update waypoint bearing data
//                if(waypointPriority < RouteEditor.executeRoute.length-1){
//                    
//                    String currentRouteName = RouteEditor.executeRoute[0];
//                    
//                    SelectedRouteTextBox.setText(currentRouteName);
//                    
//                    //Dynamic
//                    String currentWaypointName = RouteEditor.executeRoute[waypointPriority];
//                    
//                    double[] LatLong = findDetailsOfWaypoint(currentWaypointName);
//                    
//                    //Split up coordinates
//                    double Lat = LatLong[0];
//                    double Long = LatLong[1];
//                    
//                    double distance = distanceBetweenPoints(currentLat, currentLong, Lat, Long);
//                    
//                    int bearing = bearingToWaypoint(currentLat, currentLong, Lat, Long);
//                    
//                    String time = stringCalcuatedTime(distance);
//                    
//                    //Formatting
//                    DecimalFormat distanceFormat = new DecimalFormat("0.00");
//                    DecimalFormat coordinateFormat = new DecimalFormat("0.0000");
//                    
//                    //Update values for waypoint enroute data
//                    ExecutedRouteReadoutLabel.setText(currentRouteName);
//                    NextWaypointReadoutLabel.setText(currentWaypointName);
//                    
//                    DistanceToWaypointLabel.setText(distanceFormat.format(distance) + " km");
//                    TimeToWaypointLabel.setText(time);
//                    
//                    LatitudeOfWaypointLabel.setText(coordinateFormat.format(Lat));
//                    LongitudeOfWaypointLabel.setText(coordinateFormat.format(Long));
//                    
//                    BearingToWaypointLabel.setText(String.valueOf(bearing) + "°");
//                    
//                    ProgressToWaypointBar.setValue(progressToWaypoint(distance));
//                    
//                }
//                else{
//                    
//                    
//                    
//                }
            }
            
            //Gyroscope x-axis (GX) and y-axis (GY)
            if(serialMessage.contains("GX") && serialMessage.contains("GY")){
                int gyroX = Integer.parseInt(serialMessage.substring(serialMessage.indexOf("GX")+2, serialMessage.indexOf("GX")+5));
                int gyroY = Integer.parseInt(serialMessage.substring(serialMessage.indexOf("GY")+2, serialMessage.indexOf("GY")+5));
                
                //Calculation of AI display
                
                //Value 100 is center point
                yPoints[1] = 100 + (gyroY-100) + (gyroX-100); yPoints[2] = 100 + (gyroY-100) - (gyroX-100);
                
                GyroAnnunciatorLight.setBackground(GreenLight);
            }
            
            //Autopilot engaged in autopilot
            if(serialMessage.contains("P")){
                
                AutopilotEngaugedAnnunciatorLight.setBackground(GreenLight);
            } else { AutopilotEngaugedAnnunciatorLight.setBackground(GreyLight); }
            
            
    
            
            //Paint AI with new data
            ArtificialHorizon.repaint();

        }
        //Show radio connection lost from autopilot
        else if(autopilotVars.radioConnected && !serialMessage.startsWith("R")){
            System.out.println("Radio Connection Lost!");

            autopilotVars.radioConnected = false;
            RadioAnnunciatorLight.setBackground(AmberLight);
            
            PowerAnnunciatorLight.setBackground(AmberLight);
            
            //Turn on specific sensors to amber for telemetry checking
            PitotAnnunciatorLight.setBackground(AmberLight);
            AltimeterAnnunciatorLight.setBackground(AmberLight);
            GyroAnnunciatorLight.setBackground(AmberLight);
            GPSAnnunciatorLight.setBackground(AmberLight);
            CompassAnnunciatorLight.setBackground(AmberLight);
        }
    }
    
    public void updateRouteDetails(double currentLat, double currentLong){
        
        String currentRouteName = null;
        
        //If there is data to update with
        boolean dataToUpdate = false;
        
        //Initialising variables
        String currentWaypointName = null;
        double Lat = 0;
        double Long = 0;
        
        //Formatting
        DecimalFormat distanceFormat = new DecimalFormat("0.00");
        DecimalFormat coordinateFormat = new DecimalFormat("0.0000");
        
        //If a route is executed update
        if(RouteEditor.routeExecuted){
            currentRouteName = RouteEditor.executeRoute[0];
            SelectedRouteTextBox.setText(currentRouteName);
        }
        
        //Check to update waypoint bearing data
        if(RouteEnabled){
            if(waypointPriority < RouteEditor.executeRoute.length-1){
                
                RouteOrDirectWaypointLabel.setText("ROUTE");
                
                RouteStatusLight.setBackground(GreenLight);
                
                currentWaypointName = RouteEditor.executeRoute[waypointPriority];

                double[] LatLong = findDetailsOfWaypoint(currentWaypointName);

                //Split up coordinates
                Lat = LatLong[0];
                Long = LatLong[1];

                dataToUpdate = true;
            }
        }
        else if(autopilotVars.directToWaypoint == true){
            
            RouteOrDirectWaypointLabel.setText("DIRECT");
            currentRouteName = "XXXX";
            
            RouteStatusLight.setBackground(GreenLight);
            
            currentWaypointName = autopilotVars.directWaypointName;
            
            double[] LatLong = findDetailsOfWaypoint(currentWaypointName);
            
            //Split up coordinates
            Lat = LatLong[0];
            Long = LatLong[1];
            
            dataToUpdate = true;
        }
        else{
            RouteStatusLight.setBackground(RedLight);
        }
        
        
        if(dataToUpdate){
            
            double distance = distanceBetweenPoints(currentLat, currentLong, Lat, Long);

            int bearing = bearingToWaypoint(currentLat, currentLong, Lat, Long);

            String time = stringCalcuatedTime(distance);
            
            //Update values for waypoint enroute data
            ExecutedRouteReadoutLabel.setText(currentRouteName);
            NextWaypointReadoutLabel.setText(currentWaypointName);

            DistanceToWaypointLabel.setText(distanceFormat.format(distance) + " km");
            TimeToWaypointLabel.setText(time);

            LatitudeOfWaypointLabel.setText(coordinateFormat.format(Lat));
            LongitudeOfWaypointLabel.setText(coordinateFormat.format(Long));

            BearingToWaypointLabel.setText(String.valueOf(bearing));

            ProgressToWaypointBar.setValue(progressToWaypoint(distance));
        }
        
    }
    
    
    //Equation functions:
    
    public double distanceBetweenPoints(double lat, double lon, double wayLat, double wayLon){
        
        //Math to calculate variables:
        int radiusOfEarth = 6371;
        
        //Convert to radians
        double latAngle = lat * Math.PI/180;
        double wayLatAngle = wayLat * Math.PI/180;
        
        //Convert to radians differences
        double changeInLat = (lat - wayLat) * Math.PI/180;
        double changeInLong = (lon - wayLon) * Math.PI/180;
        
        //Doesn't require log lookups to find values
        double haversideSummation = ( Math.pow( (Math.sin(changeInLat/2)), 2) ) + ( (Math.cos(latAngle)) * (Math.cos(wayLatAngle)) * ( Math.pow( (Math.sin(changeInLong/2)), 2) ));
        
        double angularDistance = 2 * Math.atan2( Math.sqrt(haversideSummation), Math.sqrt(1 - haversideSummation) );
        
        double distance = angularDistance * radiusOfEarth;
        
        //Return value of distance between coordinates (in km)
        return distance;
        
    }
    
    public int progressToWaypoint(double distance){
        
        //Progress from 0 - 100
        int progress = 0;
        
        double percentageChangeInDistance = 0;
        
        //Initial condition since distance cannot be negative - Or distance to set from waypoint to swtich
        if(initialDistanceFromWaypoint <= -1){
            initialDistanceFromWaypoint = distance;
        }
        
        if(initialDistanceFromWaypoint != distance){
            percentageChangeInDistance = (((initialDistanceFromWaypoint - distance)/initialDistanceFromWaypoint) * 100);
        }
        
        progress = (int) percentageChangeInDistance;
        
        System.out.println(progress);
        
        //Next switch is for next waypoint
        if(percentageChangeInDistance >= 99.5){
            initialDistanceFromWaypoint = -1;
            waypointPriority += 1;
        }
        
        return progress;
    }
    
    public int bearingToWaypoint(double lat, double lon, double wayLat, double wayLon){
        
        double yValue = Math.sin(wayLon - lon) *  Math.cos(wayLat);
        
        double xValue = (Math.cos(lat) * Math.sin(wayLat)) - (Math.sin(lat) * Math.cos(wayLat) * Math.cos(wayLat - lat));
        
        double radians = Math.atan2(yValue, xValue);
        
        double bearing = (radians * 180 / Math.PI + 360) % 360;
        
        return (int) bearing;
        
    }
    
    public String stringCalcuatedTime(double distance){
        
        int speed = Integer.parseInt(SpeedReadoutLabel.getText());
        
        double calculatedTime = distance / speed;
        
        int hours = (int) calculatedTime;
        
        int minutes = (int) (calculatedTime * 60) % 60;
        
        int seconds = (int) (calculatedTime * (3600)) % 60;
        
        String calculatedStringTimeFormat = hours + "h : " + minutes + "m : " + seconds + "s";
        
        return calculatedStringTimeFormat;
        
    }

    private void ButtonCloseComPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCloseComPortActionPerformed
        ActiveSerialPort.closePort();
        isSerialPortOpen = false;
        System.out.println("Port has closed");
        
        //Text Display
        SerialOutputTextArea.append("*Port has closed*\n- - - - - - - - - -\n");
        
        //Enable / disable user from changing parameters
        ButtonCloseComPort.setEnabled(false);
        ButtonOpenComPort.setEnabled(true);
        ComRefreshButton.setEnabled(true);
        ComboBoxHardwareInterfaceType.setEnabled(true);
        ComboBoxCOM.setEnabled(true);
        
        ArtificialHorizon.repaint();
        
        //Reset Lights
        SerialConnectedLight.setBackground(new Color(255,102,102));
        SerialAnnunciatorLight.setBackground(new Color(204,204,204));
        RadioAnnunciatorLight.setBackground(new Color(204,204,204));
        PowerAnnunciatorLight.setBackground(new Color(204,204,204));
        
        PitotAnnunciatorLight.setBackground(new Color(204,204,204));
        AltimeterAnnunciatorLight.setBackground(new Color(204,204,204));
        GyroAnnunciatorLight.setBackground(new Color(204,204,204));
        GPSAnnunciatorLight.setBackground(new Color(204,204,204));
        CompassAnnunciatorLight.setBackground(new Color(204,204,204));
        
        AutopilotEngaugedAnnunciatorLight.setBackground(new Color(204,204,204));

        autopilotVars.serialConnected = false;
        
        //Disable autopilot
        autopilotVars.AutopilotMaster = false;
                
        AutopilotMasterLight.setBackground(new Color(255,102,102));
        
        jMenuItemAutopilotDisconnect.setEnabled(false);
    }//GEN-LAST:event_ButtonCloseComPortActionPerformed

    private void SelectSelectedWaypointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectSelectedWaypointButtonActionPerformed
        try{
            int WaypointTableRowSelected = WaypointsTable.getSelectedRow();
            
            System.out.println(WaypointTableRowSelected);

            String SelectedWaypointName = (String) WaypointsTable.getModel().getValueAt(WaypointTableRowSelected, 0);
            
            
            SelectedWaypointNameTextField.setText(SelectedWaypointName);
            DirectWaypointNameTextField.setText(SelectedWaypointName);
            
            WaypointSelectedLight.setBackground(new Color(131,213,131));
            
            double SelectedLat = (double) WaypointsTable.getModel().getValueAt(WaypointTableRowSelected, 2);
            double SelectedLong = (double) WaypointsTable.getModel().getValueAt(WaypointTableRowSelected, 3);
            String SelectedType = (String) WaypointsTable.getModel().getValueAt(WaypointTableRowSelected, 1);
            
            ShowSelectedLatLabel.setText(Double.toString(SelectedLat));
            ShowSelectedLongLabel.setText(Double.toString(SelectedLong));
            ShowSelectedTypeLabel.setText(SelectedType);
            
            autopilotVars.directWaypointName = SelectedWaypointName;
            
        }
        catch(Exception e){
            System.out.println("No Row selected...");
            System.out.println(e);
        }
    }//GEN-LAST:event_SelectSelectedWaypointButtonActionPerformed
    public void wrongInput(){
        JFrame frame = new JFrame("Autopilot");
        //Error if user types anything other than a integer for the autopilot inputs
        JOptionPane.showConfirmDialog(frame,"Numbers can only be used for input!","Autopilot",JOptionPane.DEFAULT_OPTION,JOptionPane.ERROR_MESSAGE);
    }
    private void SetSpeedAutopilotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetSpeedAutopilotButtonActionPerformed
        try{
            int userSpeed = Integer.parseInt(SpeedInputTextbox.getText());
            
            if((SpeedSetLight.getBackground().equals(RedLight) || SpeedSetLight.getBackground().equals(OrangeLight)) || (userSpeed != autopilotVars.speedSet)){
                

                autopilotVars.speedSet = userSpeed;

                AutopilotVariableSpeedReadout.setText(String.valueOf(userSpeed));
                
                SpeedSetLight.setBackground(GreenLight);
                SpeedHoldButton.setBackground(GreyLight);
                
                autopilotVars.holdCurrentSpeed = false;
            }
            else{
               SpeedSetLight.setBackground(RedLight); 
            }
        }
        catch(Exception e){
            wrongInput();
        }
    }//GEN-LAST:event_SetSpeedAutopilotButtonActionPerformed

    private void SetHeadingAutopilotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetHeadingAutopilotButtonActionPerformed
        try{
            int userHeading = Integer.parseInt(HeadingInputTextbox.getText());
            
            if(HeadingSetLight.getBackground().equals(MagentaLight) || HeadingSetLight.getBackground().equals(RedLight) || HeadingSetLight.getBackground().equals(OrangeLight) || (userHeading != autopilotVars.headingSet)){ // Check Red or Magenta or Orange
                
                if(0 <= userHeading && userHeading <=360){
                    //Since 000 degrees = 360 degrees
                    if(userHeading == 0){ userHeading = 360; }

                    autopilotVars.headingSet = userHeading;

                    AutopilotVariableHeadingReadout.setText(String.valueOf(userHeading));
                    HeadingSetLight.setBackground(new Color(131,213,131));

                    autopilotVars.directToWaypoint = false;
                    autopilotVars.holdCurrentHeading = false;

                    DirectSetLight.setBackground(new Color(255,102,102)); // Set DIRECT button to off
                    HeadingHoldButton.setBackground(new Color(204,204,204));
                }
                else{
                    JFrame frame = new JFrame("Autopilot");
                    //Error if user types anything other than a integer for the autopilot inputs
                    JOptionPane.showConfirmDialog(frame,"Headings can only be between 0 and 360 degrees!","Autopilot",JOptionPane.DEFAULT_OPTION,JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                HeadingSetLight.setBackground(new Color(255,102,102));
            }
        }
        catch(Exception e){
            wrongInput();
        }
    }//GEN-LAST:event_SetHeadingAutopilotButtonActionPerformed

    private void AltitudeHoldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AltitudeHoldButtonActionPerformed
        if(!autopilotVars.holdCurrentAltitude){
            autopilotVars.holdCurrentAltitude = true;
            
            int currentAltitude = Integer.valueOf(HeightReadoutLabel.getText());
            
            autopilotVars.altitudeSet = currentAltitude;
            AutopilotVariableAltitudeReadout.setText(String.valueOf(currentAltitude));
            
            AltitudeHoldButton.setBackground(new Color(131,213,131)); // Set button to Green
            AltitudeSetLight.setBackground(new Color(234,169,104)); // Light set to show HOLD active
        }
        else{
            autopilotVars.holdCurrentAltitude = false;
            
            AltitudeHoldButton.setBackground(new Color(204,204,204)); // Set button to Grey
            AltitudeSetLight.setBackground(new Color(255,102,102)); // Light set to show HOLD unactive
            
        }
    }//GEN-LAST:event_AltitudeHoldButtonActionPerformed

    private void HeadingHoldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeadingHoldButtonActionPerformed
        if(!autopilotVars.holdCurrentHeading){
            autopilotVars.directToWaypoint = false;
            autopilotVars.holdCurrentHeading = true;
            
            int currentHeading = Integer.valueOf(HeadingReadoutLabel.getText());
            
            autopilotVars.headingSet = currentHeading;
            AutopilotVariableHeadingReadout.setText(String.valueOf(currentHeading));
            
            DirectSetLight.setBackground(new Color(255,102,102)); // Set DIRECT button to off
            
            HeadingHoldButton.setBackground(new Color(131,213,131)); // Set button to Green
            HeadingSetLight.setBackground(new Color(234,169,104)); // Light set to show HOLD active
        }
        else{
            autopilotVars.holdCurrentHeading = false;
            
            HeadingHoldButton.setBackground(new Color(204,204,204)); // Set button to Grey
            HeadingSetLight.setBackground(new Color(255,102,102)); // Light set to show HOLD unactive 
        }
    }//GEN-LAST:event_HeadingHoldButtonActionPerformed

    private void SetQNHTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetQNHTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SetQNHTextFieldActionPerformed

    private void HectopascalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HectopascalRadioButtonActionPerformed
        if(textboxPressureType != 'P'){
            textboxPressureType = 'P';
            
            double textboxPressure = Double.parseDouble(SetQNHTextField.getText());

            textboxPressure = (double)Math.round((textboxPressure / 0.02953) * 100)/100; // Rounds and converts the pressure to 2 dp

            SetQNHTextField.setText(Double.toString(textboxPressure));
        }
    }//GEN-LAST:event_HectopascalRadioButtonActionPerformed
    private void InchesMercRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InchesMercRadioButtonActionPerformed
        if(textboxPressureType != 'I'){
            textboxPressureType = 'I';
            
            double textboxPressure = Double.parseDouble(SetQNHTextField.getText());

            textboxPressure = (double)Math.round((textboxPressure * 0.02953) * 100)/100; // Rounds and converts the pressure to 2 dp

            SetQNHTextField.setText(Double.toString(textboxPressure));
        }
    }//GEN-LAST:event_InchesMercRadioButtonActionPerformed

    private void QNHUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QNHUpdateButtonActionPerformed
        try{
            if(SetQNHTextField.isEnabled()){
                autopilotVars.QNHset = Double.parseDouble(SetQNHTextField.getText());
                
                System.out.println("QNH set: " + autopilotVars.QNHset);
                
                if(HectopascalRadioButton.isSelected()){
                    autopilotVars.QNHtype = 'P';
                    System.out.println("Pascals");
                }
                else if (InchesMercRadioButton.isSelected()){
                    autopilotVars.QNHtype = 'I';
                    System.out.println("inHg");
                }
                else{
                    throw new Exception("No button selected");
                }
                
                HectopascalRadioButton.setEnabled(false);
                InchesMercRadioButton.setEnabled(false);
                SetQNHTextField.setEnabled(false);
                StandardPressureButton.setEnabled(false);
                QNHUpdateButton.setText("CHANGE");
                QNHUpdateButton.setBackground(new Color(131,213,131));
            }
            else{
                HectopascalRadioButton.setEnabled(true);
                InchesMercRadioButton.setEnabled(true);
                SetQNHTextField.setEnabled(true);
                StandardPressureButton.setEnabled(true);
                QNHUpdateButton.setText("SET");
                QNHUpdateButton.setBackground(new Color(204,204,204));
            }
        }
        catch(Exception e){
            System.out.println("Invalid QNH settings");
        }
    }//GEN-LAST:event_QNHUpdateButtonActionPerformed

    private void MASTERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MASTERActionPerformed
        JFrame frame = new JFrame("Autopilot");
        
        if(!autopilotVars.AutopilotMaster && autopilotVars.serialConnected){
            int confirm = JOptionPane.showConfirmDialog(frame,"Turn on autopilot?","Autopilot",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);

            if(confirm == JOptionPane.YES_OPTION){
                autopilotVars.AutopilotMaster = true;
                
                AutopilotMasterLight.setBackground(GreenLight);
                
                jMenuItemAutopilotDisconnect.setEnabled(true);
            }
            else if(confirm == JOptionPane.NO_OPTION){
                System.out.println("No clicked");
                //Therefore do nothing
            }
            else{
                System.out.println("No option selected");
            }
        }
        else if(!autopilotVars.serialConnected){
            JOptionPane.showMessageDialog(frame,"Serial not connected!");
        }
        else{
            autopilotVars.AutopilotMaster = false;
                
            AutopilotMasterLight.setBackground(RedLight);
            
            jMenuItemAutopilotDisconnect.setEnabled(false);
        }
    }//GEN-LAST:event_MASTERActionPerformed

    private void OpenRouteGUIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenRouteGUIButtonActionPerformed
        showRouteEditor();
    }//GEN-LAST:event_OpenRouteGUIButtonActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        showRouteEditor();
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void TestSerialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestSerialButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TestSerialButtonActionPerformed

    private void StandardPressureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandardPressureButtonActionPerformed
        if(HectopascalRadioButton.isSelected()){
            SetQNHTextField.setText("1013.25");
        }
        else if(InchesMercRadioButton.isSelected()){
            SetQNHTextField.setText("29.92");
        }
    }//GEN-LAST:event_StandardPressureButtonActionPerformed

    private void AutoscrollCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoscrollCheckBoxActionPerformed
        DefaultCaret caret = (DefaultCaret) SerialOutputTextArea.getCaret();
        
        if(AutoscrollCheckBox.isSelected()){
            caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
            SerialOutputTextArea.setCaretPosition(SerialOutputTextArea.getDocument().getLength());
            System.out.println("Autoscroll: Yes");
        }
        else if(!AutoscrollCheckBox.isSelected()){
            
            
            caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
            System.out.println("Autoscroll: No");
        }
    }//GEN-LAST:event_AutoscrollCheckBoxActionPerformed

    private void EnableRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnableRouteButtonActionPerformed
        if(!SelectedRouteTextBox.getText().equals("")){
            
            if(RouteEnabledButtonLight.getBackground().equals(RedLight) && RouteEditor.routeExecuted == true){
                
                RouteEnabled = true;
                autopilotVars.directToWaypoint = false;
                
                DirectSetLight.setBackground(RedLight);
                
                RouteEnabledButtonLight.setBackground(GreenLight);
                
                HeadingSetLight.setBackground(MagentaLight);
               
            }
            
            else if(RouteEnabledButtonLight.getBackground().equals(GreenLight)){
                
                RouteEnabled = false;
                
                RouteEnabledButtonLight.setBackground(RedLight);
            }
            
        }
        else{
            System.out.println("No current active route");
        }
    }//GEN-LAST:event_EnableRouteButtonActionPerformed
    public void showRouteEditor(){
        if(!RouteEditor.isVisible()){
            RouteEditor.setSize(680, 320);
            RouteEditor.setVisible(true);
        }
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainAutopilotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainAutopilotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainAutopilotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainAutopilotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainAutopilotGUI().setVisible(true);
            }
        });
    }
    
    class DrawCanvas extends Canvas {
        
        @Override
        public void paint(Graphics g) {
            
            g.setColor(Color.ORANGE);
            g.fillPolygon(xPoints,yPoints, 4);
            
            g.setColor(Color.WHITE);
            //Horizontal line
            g.fillRect(50, 98, 100, 4);
            
            // +10
            g.fillRect(75, 59, 50, 2);
            g.drawString("10", 130, 64);
            // + 5
            g.fillRect(90, 79, 20, 2);
            g.drawString("5", 115, 84);
            // -5
            g.fillRect(90, 119, 20, 2);
            g.drawString("5", 115, 124);
            // -10
            g.fillRect(75, 139, 50, 2);
            g.drawString("10", 130, 145);
            
            g.drawString("HDG: " + ArtHDG, 75, 15);
            g.drawString("SPD: " + ArtSPD, 75, 30);
            
            g.drawLine(0,yPoints[1],200,yPoints[2]);
            
            if(!isSerialPortOpen){
                g.setColor(Color.RED);
                g.drawLine(0,200,200,0);
                g.drawLine(0,0,200,200);
            }
        }
        
        @Override
        public void update(Graphics g) {
            super.paint(g);
            
            g.setColor(Color.ORANGE);
            g.fillPolygon(xPoints,yPoints, 4);
            
            g.setColor(Color.WHITE);
            //Horizontal line
            g.fillRect(50, 98, 100, 4);
            
            // +10
            g.fillRect(75, 59, 50, 2);
            g.drawString("10", 130, 64);
            // + 5
            g.fillRect(90, 79, 20, 2);
            g.drawString("5", 115, 84);
            // -5
            g.fillRect(90, 119, 20, 2);
            g.drawString("5", 115, 124);
            // -10
            g.fillRect(75, 139, 50, 2);
            g.drawString("10", 130, 145);
            
            g.drawString("HDG: " + ArtHDG, 75, 15);
            g.drawString("SPD: " + ArtSPD, 75, 30);
            
            g.drawLine(0,yPoints[1],200,yPoints[2]);
            
            if(yPoints[1] >= 300 || yPoints[1] <= 0 || yPoints[2] >= 300 || yPoints[2] <= 0){
                g.setColor(Color.RED);
                g.drawString("CAUTION OVERBANK", 172, 20);
            }
            
            if(!isSerialPortOpen){
                g.setColor(Color.RED);
                g.drawLine(0,200,200,0);
                g.drawLine(0,0,200,200);
            }
        } 
    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AltimeterAnnunciatorLight;
    private javax.swing.JButton AltitudeHoldButton;
    private javax.swing.JTextField AltitudeInputTextbox;
    private javax.swing.JPanel AltitudeSetLight;
    private java.awt.Canvas ArtificialHorizon;
    private javax.swing.JPanel AutopilotEngaugedAnnunciatorLight;
    private javax.swing.JPanel AutopilotMasterLight;
    private javax.swing.JLabel AutopilotVariableAltitudeReadout;
    private javax.swing.JLabel AutopilotVariableAltitudeReadout1;
    private javax.swing.JLabel AutopilotVariableAltitudeReadout11;
    private javax.swing.JLabel AutopilotVariableAltitudeReadout13;
    private javax.swing.JLabel AutopilotVariableAltitudeReadout4;
    private javax.swing.JLabel AutopilotVariableAltitudeReadout5;
    private javax.swing.JLabel AutopilotVariableAltitudeReadout7;
    private javax.swing.JLabel AutopilotVariableAltitudeReadout9;
    private javax.swing.JLabel AutopilotVariableHeadingReadout;
    private javax.swing.JLabel AutopilotVariableRouteReadout;
    private javax.swing.JLabel AutopilotVariableSpeedReadout;
    private javax.swing.JLabel AutopilotVariableWaypointReadout;
    private javax.swing.JCheckBox AutoscrollCheckBox;
    private javax.swing.JLabel BearingToWaypointLabel;
    private javax.swing.JButton ButtonCloseComPort;
    private javax.swing.JButton ButtonOpenComPort;
    private javax.swing.JButton ComRefreshButton;
    private javax.swing.JComboBox<String> ComboBoxCOM;
    private javax.swing.JComboBox<String> ComboBoxHardwareInterfaceType;
    private javax.swing.JPanel CompassAnnunciatorLight;
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JPanel DirectSetLight;
    private javax.swing.JPanel DirectSetLight1;
    private javax.swing.JButton DirectToWaypointButton;
    private javax.swing.JTextField DirectWaypointNameTextField;
    private javax.swing.JLabel DistanceToWaypointLabel;
    private javax.swing.JButton EnableRouteButton;
    private javax.swing.JLabel ExecutedRouteReadoutLabel;
    private javax.swing.JPanel FlightPanel;
    private javax.swing.JPanel GPSAnnunciatorLight;
    private javax.swing.JPanel GyroAnnunciatorLight;
    private javax.swing.JButton HeadingHoldButton;
    private javax.swing.JTextField HeadingInputTextbox;
    private javax.swing.JLabel HeadingReadoutLabel;
    private javax.swing.JPanel HeadingSetLight;
    private javax.swing.JRadioButton HectopascalRadioButton;
    private javax.swing.JLabel HeightReadoutLabel;
    private javax.swing.JRadioButton InchesMercRadioButton;
    private javax.swing.JLabel LatitudeOfWaypointLabel;
    private javax.swing.JLabel LongitudeOfWaypointLabel;
    private javax.swing.JButton MASTER;
    private javax.swing.JMenuBar MenuBarMain;
    private javax.swing.JLabel NextWaypointReadoutLabel;
    private javax.swing.JButton OpenRouteGUIButton;
    private javax.swing.JPanel PitotAnnunciatorLight;
    private javax.swing.JPanel PowerAnnunciatorLight;
    private javax.swing.JProgressBar ProgressToWaypointBar;
    private javax.swing.JButton QNHUpdateButton;
    private javax.swing.JPanel RadioAnnunciatorLight;
    private javax.swing.JLabel RouteCurrentLatitudeReadoutLabel;
    private javax.swing.JLabel RouteCurrentLongitudeReadoutLabel;
    private javax.swing.JPanel RouteEnabledButtonLight;
    private javax.swing.JLabel RouteOrDirectWaypointLabel;
    private javax.swing.JPanel RouteStatusLight;
    private javax.swing.JButton SelectSelectedWaypointButton;
    private javax.swing.JTextField SelectedRouteTextBox;
    private javax.swing.JTextField SelectedWaypointNameTextField;
    private javax.swing.JPanel SerialAnnunciatorLight;
    private javax.swing.JPanel SerialConnectedLight;
    private javax.swing.JTextArea SerialOutputTextArea;
    private javax.swing.JButton SetAltitudeAutopilotButton;
    private javax.swing.JButton SetHeadingAutopilotButton;
    private javax.swing.JTextField SetQNHTextField;
    private javax.swing.JButton SetSpeedAutopilotButton;
    private javax.swing.JLabel ShowSelectedLatLabel;
    private javax.swing.JLabel ShowSelectedLongLabel;
    private javax.swing.JLabel ShowSelectedTypeLabel;
    private javax.swing.JButton SpeedHoldButton;
    private javax.swing.JTextField SpeedInputTextbox;
    private javax.swing.JLabel SpeedReadoutLabel;
    private javax.swing.JPanel SpeedSetLight;
    private javax.swing.JButton StandardPressureButton;
    private javax.swing.JButton TestSerialButton;
    private javax.swing.JLabel TimeToWaypointLabel;
    private javax.swing.JPanel WaypointPanel;
    private javax.swing.JButton WaypointSearchButton;
    private javax.swing.JTextField WaypointSearchTextField;
    private javax.swing.JPanel WaypointSelectedLight;
    private javax.swing.JTable WaypointsTable;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenuAutopilot;
    private javax.swing.JMenuItem jMenuItemAutopilotDisconnect;
    private javax.swing.JMenuItem jMenuItemCreateRoute;
    private javax.swing.JMenuItem jMenuItemCreateRoute2;
    private javax.swing.JMenuItem jMenuItemDisconnect1;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenu jMenuRoute;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator18;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator21;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel typelabel1jlabel;
    // End of variables declaration//GEN-END:variables
}
